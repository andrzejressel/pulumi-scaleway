// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadbalancerRouteState extends com.pulumi.resources.ResourceArgs {

    public static final LoadbalancerRouteState Empty = new LoadbalancerRouteState();

    /**
     * The ID of the backend to which the route is associated.
     * 
     */
    @Import(name="backendId")
    private @Nullable Output<String> backendId;

    /**
     * @return The ID of the backend to which the route is associated.
     * 
     */
    public Optional<Output<String>> backendId() {
        return Optional.ofNullable(this.backendId);
    }

    /**
     * The ID of the frontend to which the route is associated.
     * 
     */
    @Import(name="frontendId")
    private @Nullable Output<String> frontendId;

    /**
     * @return The ID of the frontend to which the route is associated.
     * 
     */
    public Optional<Output<String>> frontendId() {
        return Optional.ofNullable(this.frontendId);
    }

    /**
     * The SNI to match.
     * 
     */
    @Import(name="matchSni")
    private @Nullable Output<String> matchSni;

    /**
     * @return The SNI to match.
     * 
     */
    public Optional<Output<String>> matchSni() {
        return Optional.ofNullable(this.matchSni);
    }

    private LoadbalancerRouteState() {}

    private LoadbalancerRouteState(LoadbalancerRouteState $) {
        this.backendId = $.backendId;
        this.frontendId = $.frontendId;
        this.matchSni = $.matchSni;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadbalancerRouteState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadbalancerRouteState $;

        public Builder() {
            $ = new LoadbalancerRouteState();
        }

        public Builder(LoadbalancerRouteState defaults) {
            $ = new LoadbalancerRouteState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendId The ID of the backend to which the route is associated.
         * 
         * @return builder
         * 
         */
        public Builder backendId(@Nullable Output<String> backendId) {
            $.backendId = backendId;
            return this;
        }

        /**
         * @param backendId The ID of the backend to which the route is associated.
         * 
         * @return builder
         * 
         */
        public Builder backendId(String backendId) {
            return backendId(Output.of(backendId));
        }

        /**
         * @param frontendId The ID of the frontend to which the route is associated.
         * 
         * @return builder
         * 
         */
        public Builder frontendId(@Nullable Output<String> frontendId) {
            $.frontendId = frontendId;
            return this;
        }

        /**
         * @param frontendId The ID of the frontend to which the route is associated.
         * 
         * @return builder
         * 
         */
        public Builder frontendId(String frontendId) {
            return frontendId(Output.of(frontendId));
        }

        /**
         * @param matchSni The SNI to match.
         * 
         * @return builder
         * 
         */
        public Builder matchSni(@Nullable Output<String> matchSni) {
            $.matchSni = matchSni;
            return this;
        }

        /**
         * @param matchSni The SNI to match.
         * 
         * @return builder
         * 
         */
        public Builder matchSni(String matchSni) {
            return matchSni(Output.of(matchSni));
        }

        public LoadbalancerRouteState build() {
            return $;
        }
    }

}

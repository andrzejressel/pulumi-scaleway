// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scaleway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BaremetalServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final BaremetalServerArgs Empty = new BaremetalServerArgs();

    /**
     * A description for the server.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the server.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The hostname of the server.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The hostname of the server.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the server.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The offer name or UUID of the baremetal server.
     * Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.
     * 
     */
    @Import(name="offer", required=true)
    private Output<String> offer;

    /**
     * @return The offer name or UUID of the baremetal server.
     * Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.
     * 
     */
    public Output<String> offer() {
        return this.offer;
    }

    /**
     * The UUID of the os to install on the server.
     * Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.
     * &gt; **Important:** Updates to `os` will reinstall the server.
     * 
     */
    @Import(name="os", required=true)
    private Output<String> os;

    /**
     * @return The UUID of the os to install on the server.
     * Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.
     * &gt; **Important:** Updates to `os` will reinstall the server.
     * 
     */
    public Output<String> os() {
        return this.os;
    }

    /**
     * `project_id`) The ID of the project the server is associated with.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return `project_id`) The ID of the project the server is associated with.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * List of SSH keys allowed to connect to the server.
     * &gt; **Important:** Updates to `ssh_key_ids` will reinstall the server.
     * 
     */
    @Import(name="sshKeyIds", required=true)
    private Output<List<String>> sshKeyIds;

    /**
     * @return List of SSH keys allowed to connect to the server.
     * &gt; **Important:** Updates to `ssh_key_ids` will reinstall the server.
     * 
     */
    public Output<List<String>> sshKeyIds() {
        return this.sshKeyIds;
    }

    /**
     * The tags associated with the server.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The tags associated with the server.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * `zone`) The zone in which the server should be created.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return `zone`) The zone in which the server should be created.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private BaremetalServerArgs() {}

    private BaremetalServerArgs(BaremetalServerArgs $) {
        this.description = $.description;
        this.hostname = $.hostname;
        this.name = $.name;
        this.offer = $.offer;
        this.os = $.os;
        this.projectId = $.projectId;
        this.sshKeyIds = $.sshKeyIds;
        this.tags = $.tags;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BaremetalServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BaremetalServerArgs $;

        public Builder() {
            $ = new BaremetalServerArgs();
        }

        public Builder(BaremetalServerArgs defaults) {
            $ = new BaremetalServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description for the server.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the server.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param hostname The hostname of the server.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname of the server.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param name The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param offer The offer name or UUID of the baremetal server.
         * Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.
         * 
         * @return builder
         * 
         */
        public Builder offer(Output<String> offer) {
            $.offer = offer;
            return this;
        }

        /**
         * @param offer The offer name or UUID of the baremetal server.
         * Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.
         * 
         * @return builder
         * 
         */
        public Builder offer(String offer) {
            return offer(Output.of(offer));
        }

        /**
         * @param os The UUID of the os to install on the server.
         * Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.
         * &gt; **Important:** Updates to `os` will reinstall the server.
         * 
         * @return builder
         * 
         */
        public Builder os(Output<String> os) {
            $.os = os;
            return this;
        }

        /**
         * @param os The UUID of the os to install on the server.
         * Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.
         * &gt; **Important:** Updates to `os` will reinstall the server.
         * 
         * @return builder
         * 
         */
        public Builder os(String os) {
            return os(Output.of(os));
        }

        /**
         * @param projectId `project_id`) The ID of the project the server is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId `project_id`) The ID of the project the server is associated with.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param sshKeyIds List of SSH keys allowed to connect to the server.
         * &gt; **Important:** Updates to `ssh_key_ids` will reinstall the server.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyIds(Output<List<String>> sshKeyIds) {
            $.sshKeyIds = sshKeyIds;
            return this;
        }

        /**
         * @param sshKeyIds List of SSH keys allowed to connect to the server.
         * &gt; **Important:** Updates to `ssh_key_ids` will reinstall the server.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyIds(List<String> sshKeyIds) {
            return sshKeyIds(Output.of(sshKeyIds));
        }

        /**
         * @param sshKeyIds List of SSH keys allowed to connect to the server.
         * &gt; **Important:** Updates to `ssh_key_ids` will reinstall the server.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyIds(String... sshKeyIds) {
            return sshKeyIds(List.of(sshKeyIds));
        }

        /**
         * @param tags The tags associated with the server.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags associated with the server.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags associated with the server.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param zone `zone`) The zone in which the server should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone `zone`) The zone in which the server should be created.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public BaremetalServerArgs build() {
            $.offer = Objects.requireNonNull($.offer, "expected parameter 'offer' to be non-null");
            $.os = Objects.requireNonNull($.os, "expected parameter 'os' to be non-null");
            $.sshKeyIds = Objects.requireNonNull($.sshKeyIds, "expected parameter 'sshKeyIds' to be non-null");
            return $;
        }
    }

}

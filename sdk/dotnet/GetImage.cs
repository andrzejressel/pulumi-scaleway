// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway
{
    public static class GetImage
    {
        /// <summary>
        /// **DEPRECATED**: This resource is deprecated and will be removed in `v2.0+`.
        /// Please use `scaleway.getInstanceImage` instead or `scaleway.getMarketplaceImageBeta` depending on your usage.
        /// 
        /// Use this data source to get the ID of a registered Image for use with the
        /// `scaleway.Server` resource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var ubuntu = Output.Create(Scaleway.GetImage.InvokeAsync(new Scaleway.GetImageArgs
        ///         {
        ///             Architecture = "arm",
        ///             Name = "Ubuntu Precise",
        ///         }));
        ///         var @base = new Scaleway.Server("base", new Scaleway.ServerArgs
        ///         {
        ///             Image = ubuntu.Apply(ubuntu =&gt; ubuntu.Id),
        ///             Type = "C1",
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetImageResult> InvokeAsync(GetImageArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("scaleway:index/getImage:getImage", args ?? new GetImageArgs(), options.WithVersion());
    }


    public sealed class GetImageArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// any supported Scaleway architecture, e.g. `x86_64`, `arm`
        /// </summary>
        [Input("architecture", required: true)]
        public string Architecture { get; set; } = null!;

        /// <summary>
        /// Return most recent image if multiple exist. Can not be used together with name_filter.
        /// </summary>
        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        /// <summary>
        /// Exact name of desired Image
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Regexp to match Image name by
        /// </summary>
        [Input("nameFilter")]
        public string? NameFilter { get; set; }

        public GetImageArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetImageResult
    {
        /// <summary>
        /// architecture of the Image, e.g. `arm` or `x86_64`
        /// </summary>
        public readonly string Architecture;
        /// <summary>
        /// date when image was created
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? MostRecent;
        public readonly string Name;
        public readonly string? NameFilter;
        /// <summary>
        /// uuid of the organization owning this Image
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// is this a public image
        /// </summary>
        public readonly bool Public;

        [OutputConstructor]
        private GetImageResult(
            string architecture,

            string creationDate,

            string id,

            bool? mostRecent,

            string name,

            string? nameFilter,

            string organization,

            bool @public)
        {
            Architecture = architecture;
            CreationDate = creationDate;
            Id = id;
            MostRecent = mostRecent;
            Name = name;
            NameFilter = nameFilter;
            Organization = organization;
            Public = @public;
        }
    }
}

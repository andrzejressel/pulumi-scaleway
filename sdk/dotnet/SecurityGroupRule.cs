// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway
{
    /// <summary>
    /// **DEPRECATED**: This resource is deprecated and will be removed in `v2.0+`.
    /// Please use `scaleway_instance_security_group_rule` instead.
    /// 
    /// Provides security group rules. This allows security group rules to be created, updated and deleted.
    /// For additional details please refer to [API documentation](https://developer.scaleway.com/#security-groups-manage-rules).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Scaleway.SecurityGroup("test", new Scaleway.SecurityGroupArgs
    ///         {
    ///             Description = "test",
    ///         });
    ///         var smtpDrop1 = new Scaleway.SecurityGroupRule("smtpDrop1", new Scaleway.SecurityGroupRuleArgs
    ///         {
    ///             SecurityGroup = test.Id,
    ///             Action = "accept",
    ///             Direction = "inbound",
    ///             IpRange = "0.0.0.0/0",
    ///             Protocol = "TCP",
    ///             Port = 25,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class SecurityGroupRule : Pulumi.CustomResource
    {
        /// <summary>
        /// action of rule (`accept`, `drop`)
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// direction of rule (`inbound`, `outbound`)
        /// </summary>
        [Output("direction")]
        public Output<string> Direction { get; private set; } = null!;

        /// <summary>
        /// ip_range of rule
        /// </summary>
        [Output("ipRange")]
        public Output<string> IpRange { get; private set; } = null!;

        /// <summary>
        /// port of the rule
        /// </summary>
        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        /// <summary>
        /// protocol of rule (`ICMP`, `TCP`, `UDP`)
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// the security group which should be associated with this rule
        /// </summary>
        [Output("securityGroup")]
        public Output<string> SecurityGroup { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityGroupRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityGroupRule(string name, SecurityGroupRuleArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/securityGroupRule:SecurityGroupRule", name, args ?? new SecurityGroupRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityGroupRule(string name, Input<string> id, SecurityGroupRuleState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/securityGroupRule:SecurityGroupRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityGroupRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityGroupRule Get(string name, Input<string> id, SecurityGroupRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityGroupRule(name, id, state, options);
        }
    }

    public sealed class SecurityGroupRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// action of rule (`accept`, `drop`)
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// direction of rule (`inbound`, `outbound`)
        /// </summary>
        [Input("direction", required: true)]
        public Input<string> Direction { get; set; } = null!;

        /// <summary>
        /// ip_range of rule
        /// </summary>
        [Input("ipRange", required: true)]
        public Input<string> IpRange { get; set; } = null!;

        /// <summary>
        /// port of the rule
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// protocol of rule (`ICMP`, `TCP`, `UDP`)
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// the security group which should be associated with this rule
        /// </summary>
        [Input("securityGroup", required: true)]
        public Input<string> SecurityGroup { get; set; } = null!;

        public SecurityGroupRuleArgs()
        {
        }
    }

    public sealed class SecurityGroupRuleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// action of rule (`accept`, `drop`)
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// direction of rule (`inbound`, `outbound`)
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// ip_range of rule
        /// </summary>
        [Input("ipRange")]
        public Input<string>? IpRange { get; set; }

        /// <summary>
        /// port of the rule
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// protocol of rule (`ICMP`, `TCP`, `UDP`)
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// the security group which should be associated with this rule
        /// </summary>
        [Input("securityGroup")]
        public Input<string>? SecurityGroup { get; set; }

        public SecurityGroupRuleState()
        {
        }
    }
}

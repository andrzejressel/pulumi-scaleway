// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway
{
    /// <summary>
    /// **DEPRECATED**: This resource is deprecated and will be removed in `v2.0+`.
    /// Please use `scaleway.InstanceSecurityGroup` instead.
    /// 
    /// Provides security groups. This allows security groups to be created, updated and deleted.
    /// For additional details please refer to [API documentation](https://developer.scaleway.com/#security-groups).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Scaleway.SecurityGroup("test", new Scaleway.SecurityGroupArgs
    ///         {
    ///             Description = "test",
    ///             EnableDefaultSecurity = true,
    ///             InboundDefaultPolicy = "accept",
    ///             OutboundDefaultPolicy = "drop",
    ///             Stateful = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class SecurityGroup : Pulumi.CustomResource
    {
        /// <summary>
        /// description of security group
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// default: true. Add default security group rules
        /// </summary>
        [Output("enableDefaultSecurity")]
        public Output<bool?> EnableDefaultSecurity { get; private set; } = null!;

        /// <summary>
        /// default policy for inbound traffic. Can be one of accept or drop
        /// </summary>
        [Output("inboundDefaultPolicy")]
        public Output<string?> InboundDefaultPolicy { get; private set; } = null!;

        /// <summary>
        /// name of security group
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// default policy for outbound traffic. Can be one of accept or drop
        /// </summary>
        [Output("outboundDefaultPolicy")]
        public Output<string?> OutboundDefaultPolicy { get; private set; } = null!;

        /// <summary>
        /// default: false. Mark the security group as stateful. Note that stateful security groups can not be associated with bare metal servers
        /// </summary>
        [Output("stateful")]
        public Output<bool?> Stateful { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityGroup(string name, SecurityGroupArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/securityGroup:SecurityGroup", name, args ?? new SecurityGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityGroup(string name, Input<string> id, SecurityGroupState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/securityGroup:SecurityGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityGroup Get(string name, Input<string> id, SecurityGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityGroup(name, id, state, options);
        }
    }

    public sealed class SecurityGroupArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// description of security group
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// default: true. Add default security group rules
        /// </summary>
        [Input("enableDefaultSecurity")]
        public Input<bool>? EnableDefaultSecurity { get; set; }

        /// <summary>
        /// default policy for inbound traffic. Can be one of accept or drop
        /// </summary>
        [Input("inboundDefaultPolicy")]
        public Input<string>? InboundDefaultPolicy { get; set; }

        /// <summary>
        /// name of security group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// default policy for outbound traffic. Can be one of accept or drop
        /// </summary>
        [Input("outboundDefaultPolicy")]
        public Input<string>? OutboundDefaultPolicy { get; set; }

        /// <summary>
        /// default: false. Mark the security group as stateful. Note that stateful security groups can not be associated with bare metal servers
        /// </summary>
        [Input("stateful")]
        public Input<bool>? Stateful { get; set; }

        public SecurityGroupArgs()
        {
        }
    }

    public sealed class SecurityGroupState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// description of security group
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// default: true. Add default security group rules
        /// </summary>
        [Input("enableDefaultSecurity")]
        public Input<bool>? EnableDefaultSecurity { get; set; }

        /// <summary>
        /// default policy for inbound traffic. Can be one of accept or drop
        /// </summary>
        [Input("inboundDefaultPolicy")]
        public Input<string>? InboundDefaultPolicy { get; set; }

        /// <summary>
        /// name of security group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// default policy for outbound traffic. Can be one of accept or drop
        /// </summary>
        [Input("outboundDefaultPolicy")]
        public Input<string>? OutboundDefaultPolicy { get; set; }

        /// <summary>
        /// default: false. Mark the security group as stateful. Note that stateful security groups can not be associated with bare metal servers
        /// </summary>
        [Input("stateful")]
        public Input<bool>? Stateful { get; set; }

        public SecurityGroupState()
        {
        }
    }
}

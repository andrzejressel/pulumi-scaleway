// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway
{
    /// <summary>
    /// Creates and manages Scaleway Compute Instance servers. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#servers-8bf7d7).
    /// 
    /// ## Examples
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var publicIp = new Scaleway.InstanceIP("publicIp", new Scaleway.InstanceIPArgs
    ///         {
    ///         });
    ///         var web = new Scaleway.InstanceServer("web", new Scaleway.InstanceServerArgs
    ///         {
    ///             Type = "DEV1-S",
    ///             Image = "ubuntu_focal",
    ///             IpId = publicIp.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ### With additional volumes and tags
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var data = new Scaleway.InstanceVolume("data", new Scaleway.InstanceVolumeArgs
    ///         {
    ///             SizeInGb = 100,
    ///             Type = "b_ssd",
    ///         });
    ///         var web = new Scaleway.InstanceServer("web", new Scaleway.InstanceServerArgs
    ///         {
    ///             Type = "DEV1-L",
    ///             Image = "ubuntu_focal",
    ///             Tags = 
    ///             {
    ///                 "hello",
    ///                 "public",
    ///             },
    ///             RootVolume = new Scaleway.Inputs.InstanceServerRootVolumeArgs
    ///             {
    ///                 DeleteOnTermination = false,
    ///             },
    ///             AdditionalVolumeIds = 
    ///             {
    ///                 data.Id,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ### With a reserved IP
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var ip = new Scaleway.InstanceIP("ip", new Scaleway.InstanceIPArgs
    ///         {
    ///         });
    ///         var web = new Scaleway.InstanceServer("web", new Scaleway.InstanceServerArgs
    ///         {
    ///             Type = "DEV1-L",
    ///             Image = "f974feac-abae-4365-b988-8ec7d1cec10d",
    ///             Tags = 
    ///             {
    ///                 "hello",
    ///                 "public",
    ///             },
    ///             IpId = ip.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ### With security group
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var www = new Scaleway.InstanceSecurityGroup("www", new Scaleway.InstanceSecurityGroupArgs
    ///         {
    ///             InboundDefaultPolicy = "drop",
    ///             OutboundDefaultPolicy = "accept",
    ///             InboundRules = 
    ///             {
    ///                 new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs
    ///                 {
    ///                     Action = "accept",
    ///                     Port = 22,
    ///                     Ip = "212.47.225.64",
    ///                 },
    ///                 new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs
    ///                 {
    ///                     Action = "accept",
    ///                     Port = 80,
    ///                 },
    ///                 new Scaleway.Inputs.InstanceSecurityGroupInboundRuleArgs
    ///                 {
    ///                     Action = "accept",
    ///                     Port = 443,
    ///                 },
    ///             },
    ///             OutboundRules = 
    ///             {
    ///                 new Scaleway.Inputs.InstanceSecurityGroupOutboundRuleArgs
    ///                 {
    ///                     Action = "drop",
    ///                     IpRange = "10.20.0.0/24",
    ///                 },
    ///             },
    ///         });
    ///         var web = new Scaleway.InstanceServer("web", new Scaleway.InstanceServerArgs
    ///         {
    ///             Type = "DEV1-S",
    ///             Image = "ubuntu_focal",
    ///             SecurityGroupId = www.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ### With user data and cloud-init
    /// 
    /// ```csharp
    /// using System.IO;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var web = new Scaleway.InstanceServer("web", new Scaleway.InstanceServerArgs
    ///         {
    ///             Type = "DEV1-L",
    ///             Image = "ubuntu_focal",
    ///             Tags = 
    ///             {
    ///                 "web",
    ///                 "public",
    ///             },
    ///             UserDatas = 
    ///             {
    ///                 new Scaleway.Inputs.InstanceServerUserDataArgs
    ///                 {
    ///                     Key = "plop",
    ///                     Value = "world",
    ///                 },
    ///                 new Scaleway.Inputs.InstanceServerUserDataArgs
    ///                 {
    ///                     Key = "xavier",
    ///                     Value = "niel",
    ///                 },
    ///             },
    ///             CloudInit = File.ReadAllText($"{path.Module}/cloud-init.yml"),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class InstanceServer : Pulumi.CustomResource
    {
        /// <summary>
        /// The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
        /// attached to the server. Updates to this field will trigger a stop/start of the server.
        /// </summary>
        [Output("additionalVolumeIds")]
        public Output<ImmutableArray<string>> AdditionalVolumeIds { get; private set; } = null!;

        /// <summary>
        /// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
        /// </summary>
        [Output("bootType")]
        public Output<string> BootType { get; private set; } = null!;

        /// <summary>
        /// The cloud init script associated with this server. Updates to this field will trigger a stop/start of the server.
        /// </summary>
        [Output("cloudInit")]
        public Output<string?> CloudInit { get; private set; } = null!;

        /// <summary>
        /// If true a dynamic IP will be attached to the server.
        /// </summary>
        [Output("enableDynamicIp")]
        public Output<bool?> EnableDynamicIp { get; private set; } = null!;

        /// <summary>
        /// Determines if IPv6 is enabled for the server.
        /// </summary>
        [Output("enableIpv6")]
        public Output<bool?> EnableIpv6 { get; private set; } = null!;

        /// <summary>
        /// The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&amp;per_page=100)
        /// to find either the right `label` or the right local image `ID` for a given `type`.
        /// </summary>
        [Output("image")]
        public Output<string> Image { get; private set; } = null!;

        /// <summary>
        /// = (Optional) The ID of the reserved IP that is attached to the server.
        /// </summary>
        [Output("ipId")]
        public Output<string?> IpId { get; private set; } = null!;

        /// <summary>
        /// The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )
        /// </summary>
        [Output("ipv6Address")]
        public Output<string> Ipv6Address { get; private set; } = null!;

        /// <summary>
        /// The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )
        /// </summary>
        [Output("ipv6Gateway")]
        public Output<string> Ipv6Gateway { get; private set; } = null!;

        /// <summary>
        /// The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )
        /// </summary>
        [Output("ipv6PrefixLength")]
        public Output<int> Ipv6PrefixLength { get; private set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// `organization_id`) The ID of the organization the server is associated with.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
        /// </summary>
        [Output("placementGroupId")]
        public Output<string?> PlacementGroupId { get; private set; } = null!;

        /// <summary>
        /// True when the placement group policy is respected.
        /// - `root_volume`
        /// </summary>
        [Output("placementGroupPolicyRespected")]
        public Output<bool> PlacementGroupPolicyRespected { get; private set; } = null!;

        /// <summary>
        /// The Scaleway internal IP address of the server.
        /// </summary>
        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        /// <summary>
        /// The public IPv4 address of the server.
        /// </summary>
        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        /// <summary>
        /// Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
        /// </summary>
        [Output("rootVolume")]
        public Output<Outputs.InstanceServerRootVolume> RootVolume { get; private set; } = null!;

        /// <summary>
        /// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
        /// </summary>
        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// The state of the server. Possible values are: `started`, `stopped` or `standby`.
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// The tags associated with the server.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The commercial type of the server.
        /// You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
        /// Updates to this field will recreate a new resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The user data associated with the server.
        /// </summary>
        [Output("userDatas")]
        public Output<ImmutableArray<Outputs.InstanceServerUserData>> UserDatas { get; private set; } = null!;

        /// <summary>
        /// `zone`) The zone in which the server should be created.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a InstanceServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstanceServer(string name, InstanceServerArgs args, CustomResourceOptions? options = null)
            : base("scaleway:index/instanceServer:InstanceServer", name, args ?? new InstanceServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstanceServer(string name, Input<string> id, InstanceServerState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:index/instanceServer:InstanceServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstanceServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstanceServer Get(string name, Input<string> id, InstanceServerState? state = null, CustomResourceOptions? options = null)
        {
            return new InstanceServer(name, id, state, options);
        }
    }

    public sealed class InstanceServerArgs : Pulumi.ResourceArgs
    {
        [Input("additionalVolumeIds")]
        private InputList<string>? _additionalVolumeIds;

        /// <summary>
        /// The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
        /// attached to the server. Updates to this field will trigger a stop/start of the server.
        /// </summary>
        public InputList<string> AdditionalVolumeIds
        {
            get => _additionalVolumeIds ?? (_additionalVolumeIds = new InputList<string>());
            set => _additionalVolumeIds = value;
        }

        /// <summary>
        /// The cloud init script associated with this server. Updates to this field will trigger a stop/start of the server.
        /// </summary>
        [Input("cloudInit")]
        public Input<string>? CloudInit { get; set; }

        /// <summary>
        /// If true a dynamic IP will be attached to the server.
        /// </summary>
        [Input("enableDynamicIp")]
        public Input<bool>? EnableDynamicIp { get; set; }

        /// <summary>
        /// Determines if IPv6 is enabled for the server.
        /// </summary>
        [Input("enableIpv6")]
        public Input<bool>? EnableIpv6 { get; set; }

        /// <summary>
        /// The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&amp;per_page=100)
        /// to find either the right `label` or the right local image `ID` for a given `type`.
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        /// <summary>
        /// = (Optional) The ID of the reserved IP that is attached to the server.
        /// </summary>
        [Input("ipId")]
        public Input<string>? IpId { get; set; }

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `organization_id`) The ID of the organization the server is associated with.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
        /// </summary>
        [Input("placementGroupId")]
        public Input<string>? PlacementGroupId { get; set; }

        /// <summary>
        /// Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
        /// </summary>
        [Input("rootVolume")]
        public Input<Inputs.InstanceServerRootVolumeArgs>? RootVolume { get; set; }

        /// <summary>
        /// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// The state of the server. Possible values are: `started`, `stopped` or `standby`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags associated with the server.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The commercial type of the server.
        /// You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
        /// Updates to this field will recreate a new resource.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("userDatas")]
        private InputList<Inputs.InstanceServerUserDataArgs>? _userDatas;

        /// <summary>
        /// The user data associated with the server.
        /// </summary>
        public InputList<Inputs.InstanceServerUserDataArgs> UserDatas
        {
            get => _userDatas ?? (_userDatas = new InputList<Inputs.InstanceServerUserDataArgs>());
            set => _userDatas = value;
        }

        /// <summary>
        /// `zone`) The zone in which the server should be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstanceServerArgs()
        {
        }
    }

    public sealed class InstanceServerState : Pulumi.ResourceArgs
    {
        [Input("additionalVolumeIds")]
        private InputList<string>? _additionalVolumeIds;

        /// <summary>
        /// The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
        /// attached to the server. Updates to this field will trigger a stop/start of the server.
        /// </summary>
        public InputList<string> AdditionalVolumeIds
        {
            get => _additionalVolumeIds ?? (_additionalVolumeIds = new InputList<string>());
            set => _additionalVolumeIds = value;
        }

        /// <summary>
        /// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
        /// </summary>
        [Input("bootType")]
        public Input<string>? BootType { get; set; }

        /// <summary>
        /// The cloud init script associated with this server. Updates to this field will trigger a stop/start of the server.
        /// </summary>
        [Input("cloudInit")]
        public Input<string>? CloudInit { get; set; }

        /// <summary>
        /// If true a dynamic IP will be attached to the server.
        /// </summary>
        [Input("enableDynamicIp")]
        public Input<bool>? EnableDynamicIp { get; set; }

        /// <summary>
        /// Determines if IPv6 is enabled for the server.
        /// </summary>
        [Input("enableIpv6")]
        public Input<bool>? EnableIpv6 { get; set; }

        /// <summary>
        /// The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&amp;per_page=100)
        /// to find either the right `label` or the right local image `ID` for a given `type`.
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// = (Optional) The ID of the reserved IP that is attached to the server.
        /// </summary>
        [Input("ipId")]
        public Input<string>? IpId { get; set; }

        /// <summary>
        /// The default ipv6 address routed to the server. ( Only set when enable_ipv6 is set to true )
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// The ipv6 gateway address. ( Only set when enable_ipv6 is set to true )
        /// </summary>
        [Input("ipv6Gateway")]
        public Input<string>? Ipv6Gateway { get; set; }

        /// <summary>
        /// The prefix length of the ipv6 subnet routed to the server. ( Only set when enable_ipv6 is set to true )
        /// </summary>
        [Input("ipv6PrefixLength")]
        public Input<int>? Ipv6PrefixLength { get; set; }

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `organization_id`) The ID of the organization the server is associated with.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
        /// </summary>
        [Input("placementGroupId")]
        public Input<string>? PlacementGroupId { get; set; }

        /// <summary>
        /// True when the placement group policy is respected.
        /// - `root_volume`
        /// </summary>
        [Input("placementGroupPolicyRespected")]
        public Input<bool>? PlacementGroupPolicyRespected { get; set; }

        /// <summary>
        /// The Scaleway internal IP address of the server.
        /// </summary>
        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        /// <summary>
        /// The public IPv4 address of the server.
        /// </summary>
        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        /// <summary>
        /// Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
        /// </summary>
        [Input("rootVolume")]
        public Input<Inputs.InstanceServerRootVolumeGetArgs>? RootVolume { get; set; }

        /// <summary>
        /// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// The state of the server. Possible values are: `started`, `stopped` or `standby`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags associated with the server.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The commercial type of the server.
        /// You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
        /// Updates to this field will recreate a new resource.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("userDatas")]
        private InputList<Inputs.InstanceServerUserDataGetArgs>? _userDatas;

        /// <summary>
        /// The user data associated with the server.
        /// </summary>
        public InputList<Inputs.InstanceServerUserDataGetArgs> UserDatas
        {
            get => _userDatas ?? (_userDatas = new InputList<Inputs.InstanceServerUserDataGetArgs>());
            set => _userDatas = value;
        }

        /// <summary>
        /// `zone`) The zone in which the server should be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstanceServerState()
        {
        }
    }
}

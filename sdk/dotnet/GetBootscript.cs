// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway
{
    public static class GetBootscript
    {
        /// <summary>
        /// **DEPRECATED**: This resource is deprecated and will be removed in `v2.0+`.
        /// 
        /// Use this data source to get the ID of a registered Bootscript for use with the
        /// `scaleway.Server` resource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var debug = Output.Create(Scaleway.GetBootscript.InvokeAsync(new Scaleway.GetBootscriptArgs
        ///         {
        ///             Architecture = "arm",
        ///             NameFilter = "Rescue",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetBootscriptResult> InvokeAsync(GetBootscriptArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBootscriptResult>("scaleway:index/getBootscript:getBootscript", args ?? new GetBootscriptArgs(), options.WithVersion());
    }


    public sealed class GetBootscriptArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// any supported Scaleway architecture, e.g. `x86_64`, `arm`
        /// </summary>
        [Input("architecture")]
        public string? Architecture { get; set; }

        /// <summary>
        /// Exact name of desired Bootscript
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Regexp to match Bootscript name by
        /// </summary>
        [Input("nameFilter")]
        public string? NameFilter { get; set; }

        public GetBootscriptArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBootscriptResult
    {
        /// <summary>
        /// architecture of the Bootscript, e.g. `arm` or `x86_64`
        /// </summary>
        public readonly string Architecture;
        /// <summary>
        /// command line arguments used for booting
        /// </summary>
        public readonly string BootCmdArgs;
        /// <summary>
        /// path to Device Tree Blob detailing hardware information
        /// </summary>
        public readonly string Dtb;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// URL to initial ramdisk content
        /// </summary>
        public readonly string Initrd;
        /// <summary>
        /// URL to used kernel
        /// </summary>
        public readonly string Kernel;
        public readonly string? Name;
        public readonly string? NameFilter;
        /// <summary>
        /// uuid of the organization owning this Bootscript
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// is this a public bootscript
        /// </summary>
        public readonly bool Public;

        [OutputConstructor]
        private GetBootscriptResult(
            string architecture,

            string bootCmdArgs,

            string dtb,

            string id,

            string initrd,

            string kernel,

            string? name,

            string? nameFilter,

            string organization,

            bool @public)
        {
            Architecture = architecture;
            BootCmdArgs = bootCmdArgs;
            Dtb = dtb;
            Id = id;
            Initrd = initrd;
            Kernel = kernel;
            Name = name;
            NameFilter = nameFilter;
            Organization = organization;
            Public = @public;
        }
    }
}

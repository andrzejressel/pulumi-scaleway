// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Compute Instance servers. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#servers-8bf7d7).
 *
 * ## Examples
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const publicIp = new scaleway.InstanceIP("publicIp", {});
 * const web = new scaleway.InstanceServer("web", {
 *     type: "DEV1-S",
 *     image: "ubuntu_focal",
 *     ipId: publicIp.id,
 * });
 * ```
 *
 * ### With additional volumes and tags
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const data = new scaleway.InstanceVolume("data", {
 *     sizeInGb: 100,
 *     type: "b_ssd",
 * });
 * const web = new scaleway.InstanceServer("web", {
 *     type: "DEV1-L",
 *     image: "ubuntu_focal",
 *     tags: [
 *         "hello",
 *         "public",
 *     ],
 *     rootVolume: {
 *         deleteOnTermination: false,
 *     },
 *     additionalVolumeIds: [data.id],
 * });
 * ```
 *
 * ### With a reserved IP
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const ip = new scaleway.InstanceIP("ip", {});
 * const web = new scaleway.InstanceServer("web", {
 *     type: "DEV1-L",
 *     image: "f974feac-abae-4365-b988-8ec7d1cec10d",
 *     tags: [
 *         "hello",
 *         "public",
 *     ],
 *     ipId: ip.id,
 * });
 * ```
 *
 * ### With security group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const www = new scaleway.InstanceSecurityGroup("www", {
 *     inboundDefaultPolicy: "drop",
 *     outboundDefaultPolicy: "accept",
 *     inboundRules: [
 *         {
 *             action: "accept",
 *             port: "22",
 *             ip: "212.47.225.64",
 *         },
 *         {
 *             action: "accept",
 *             port: "80",
 *         },
 *         {
 *             action: "accept",
 *             port: "443",
 *         },
 *     ],
 *     outboundRules: [{
 *         action: "drop",
 *         ipRange: "10.20.0.0/24",
 *     }],
 * });
 * const web = new scaleway.InstanceServer("web", {
 *     type: "DEV1-S",
 *     image: "ubuntu_focal",
 *     securityGroupId: www.id,
 * });
 * ```
 *
 * ### With user data and cloud-init
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 * import * from "fs";
 *
 * const web = new scaleway.InstanceServer("web", {
 *     type: "DEV1-L",
 *     image: "ubuntu_focal",
 *     tags: [
 *         "web",
 *         "public",
 *     ],
 *     userDatas: [
 *         {
 *             key: "plop",
 *             value: "world",
 *         },
 *         {
 *             key: "xavier",
 *             value: "niel",
 *         },
 *     ],
 *     cloudInit: fs.readFileSync(`${path.module}/cloud-init.yml`),
 * });
 * ```
 */
export class InstanceServer extends pulumi.CustomResource {
    /**
     * Get an existing InstanceServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceServerState, opts?: pulumi.CustomResourceOptions): InstanceServer {
        return new InstanceServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/instanceServer:InstanceServer';

    /**
     * Returns true if the given object is an instance of InstanceServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceServer.__pulumiType;
    }

    /**
     * The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
     * attached to the server. Updates to this field will trigger a stop/start of the server.
     */
    public readonly additionalVolumeIds!: pulumi.Output<string[] | undefined>;
    /**
     * The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
     */
    public /*out*/ readonly bootType!: pulumi.Output<string>;
    /**
     * The cloud init script associated with this server. Updates to this field will trigger a stop/start of the server.
     */
    public readonly cloudInit!: pulumi.Output<string | undefined>;
    /**
     * If true a dynamic IP will be attached to the server.
     */
    public readonly enableDynamicIp!: pulumi.Output<boolean | undefined>;
    /**
     * Determines if IPv6 is enabled for the server.
     */
    public readonly enableIpv6!: pulumi.Output<boolean | undefined>;
    /**
     * The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&per_page=100)
     * to find either the right `label` or the right local image `ID` for a given `type`.
     */
    public readonly image!: pulumi.Output<string>;
    /**
     * = (Optional) The ID of the reserved IP that is attached to the server.
     */
    public readonly ipId!: pulumi.Output<string | undefined>;
    /**
     * The default ipv6 address routed to the server. ( Only set when enableIpv6 is set to true )
     */
    public /*out*/ readonly ipv6Address!: pulumi.Output<string>;
    /**
     * The ipv6 gateway address. ( Only set when enableIpv6 is set to true )
     */
    public /*out*/ readonly ipv6Gateway!: pulumi.Output<string>;
    /**
     * The prefix length of the ipv6 subnet routed to the server. ( Only set when enableIpv6 is set to true )
     */
    public /*out*/ readonly ipv6PrefixLength!: pulumi.Output<number>;
    /**
     * The name of the server.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * `organizationId`) The ID of the organization the server is associated with.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
     */
    public readonly placementGroupId!: pulumi.Output<string | undefined>;
    /**
     * True when the placement group policy is respected.
     * - `rootVolume`
     */
    public /*out*/ readonly placementGroupPolicyRespected!: pulumi.Output<boolean>;
    /**
     * The Scaleway internal IP address of the server.
     */
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    /**
     * The public IPv4 address of the server.
     */
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    /**
     * Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
     */
    public readonly rootVolume!: pulumi.Output<outputs.InstanceServerRootVolume>;
    /**
     * The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
     */
    public readonly securityGroupId!: pulumi.Output<string>;
    /**
     * The state of the server. Possible values are: `started`, `stopped` or `standby`.
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * The tags associated with the server.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The commercial type of the server.
     * You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
     * Updates to this field will recreate a new resource.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The user data associated with the server.
     */
    public readonly userDatas!: pulumi.Output<outputs.InstanceServerUserData[] | undefined>;
    /**
     * `zone`) The zone in which the server should be created.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a InstanceServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceServerArgs | InstanceServerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as InstanceServerState | undefined;
            inputs["additionalVolumeIds"] = state ? state.additionalVolumeIds : undefined;
            inputs["bootType"] = state ? state.bootType : undefined;
            inputs["cloudInit"] = state ? state.cloudInit : undefined;
            inputs["enableDynamicIp"] = state ? state.enableDynamicIp : undefined;
            inputs["enableIpv6"] = state ? state.enableIpv6 : undefined;
            inputs["image"] = state ? state.image : undefined;
            inputs["ipId"] = state ? state.ipId : undefined;
            inputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            inputs["ipv6Gateway"] = state ? state.ipv6Gateway : undefined;
            inputs["ipv6PrefixLength"] = state ? state.ipv6PrefixLength : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["organizationId"] = state ? state.organizationId : undefined;
            inputs["placementGroupId"] = state ? state.placementGroupId : undefined;
            inputs["placementGroupPolicyRespected"] = state ? state.placementGroupPolicyRespected : undefined;
            inputs["privateIp"] = state ? state.privateIp : undefined;
            inputs["publicIp"] = state ? state.publicIp : undefined;
            inputs["rootVolume"] = state ? state.rootVolume : undefined;
            inputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["userDatas"] = state ? state.userDatas : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as InstanceServerArgs | undefined;
            if (!args || args.image === undefined) {
                throw new Error("Missing required property 'image'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["additionalVolumeIds"] = args ? args.additionalVolumeIds : undefined;
            inputs["cloudInit"] = args ? args.cloudInit : undefined;
            inputs["enableDynamicIp"] = args ? args.enableDynamicIp : undefined;
            inputs["enableIpv6"] = args ? args.enableIpv6 : undefined;
            inputs["image"] = args ? args.image : undefined;
            inputs["ipId"] = args ? args.ipId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["organizationId"] = args ? args.organizationId : undefined;
            inputs["placementGroupId"] = args ? args.placementGroupId : undefined;
            inputs["rootVolume"] = args ? args.rootVolume : undefined;
            inputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["userDatas"] = args ? args.userDatas : undefined;
            inputs["zone"] = args ? args.zone : undefined;
            inputs["bootType"] = undefined /*out*/;
            inputs["ipv6Address"] = undefined /*out*/;
            inputs["ipv6Gateway"] = undefined /*out*/;
            inputs["ipv6PrefixLength"] = undefined /*out*/;
            inputs["placementGroupPolicyRespected"] = undefined /*out*/;
            inputs["privateIp"] = undefined /*out*/;
            inputs["publicIp"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(InstanceServer.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceServer resources.
 */
export interface InstanceServerState {
    /**
     * The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
     * attached to the server. Updates to this field will trigger a stop/start of the server.
     */
    readonly additionalVolumeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
     */
    readonly bootType?: pulumi.Input<string>;
    /**
     * The cloud init script associated with this server. Updates to this field will trigger a stop/start of the server.
     */
    readonly cloudInit?: pulumi.Input<string>;
    /**
     * If true a dynamic IP will be attached to the server.
     */
    readonly enableDynamicIp?: pulumi.Input<boolean>;
    /**
     * Determines if IPv6 is enabled for the server.
     */
    readonly enableIpv6?: pulumi.Input<boolean>;
    /**
     * The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&per_page=100)
     * to find either the right `label` or the right local image `ID` for a given `type`.
     */
    readonly image?: pulumi.Input<string>;
    /**
     * = (Optional) The ID of the reserved IP that is attached to the server.
     */
    readonly ipId?: pulumi.Input<string>;
    /**
     * The default ipv6 address routed to the server. ( Only set when enableIpv6 is set to true )
     */
    readonly ipv6Address?: pulumi.Input<string>;
    /**
     * The ipv6 gateway address. ( Only set when enableIpv6 is set to true )
     */
    readonly ipv6Gateway?: pulumi.Input<string>;
    /**
     * The prefix length of the ipv6 subnet routed to the server. ( Only set when enableIpv6 is set to true )
     */
    readonly ipv6PrefixLength?: pulumi.Input<number>;
    /**
     * The name of the server.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * `organizationId`) The ID of the organization the server is associated with.
     */
    readonly organizationId?: pulumi.Input<string>;
    /**
     * The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
     */
    readonly placementGroupId?: pulumi.Input<string>;
    /**
     * True when the placement group policy is respected.
     * - `rootVolume`
     */
    readonly placementGroupPolicyRespected?: pulumi.Input<boolean>;
    /**
     * The Scaleway internal IP address of the server.
     */
    readonly privateIp?: pulumi.Input<string>;
    /**
     * The public IPv4 address of the server.
     */
    readonly publicIp?: pulumi.Input<string>;
    /**
     * Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
     */
    readonly rootVolume?: pulumi.Input<inputs.InstanceServerRootVolume>;
    /**
     * The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
     */
    readonly securityGroupId?: pulumi.Input<string>;
    /**
     * The state of the server. Possible values are: `started`, `stopped` or `standby`.
     */
    readonly state?: pulumi.Input<string>;
    /**
     * The tags associated with the server.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The commercial type of the server.
     * You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
     * Updates to this field will recreate a new resource.
     */
    readonly type?: pulumi.Input<string>;
    /**
     * The user data associated with the server.
     */
    readonly userDatas?: pulumi.Input<pulumi.Input<inputs.InstanceServerUserData>[]>;
    /**
     * `zone`) The zone in which the server should be created.
     */
    readonly zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceServer resource.
 */
export interface InstanceServerArgs {
    /**
     * The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
     * attached to the server. Updates to this field will trigger a stop/start of the server.
     */
    readonly additionalVolumeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The cloud init script associated with this server. Updates to this field will trigger a stop/start of the server.
     */
    readonly cloudInit?: pulumi.Input<string>;
    /**
     * If true a dynamic IP will be attached to the server.
     */
    readonly enableDynamicIp?: pulumi.Input<boolean>;
    /**
     * Determines if IPv6 is enabled for the server.
     */
    readonly enableIpv6?: pulumi.Input<boolean>;
    /**
     * The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&per_page=100)
     * to find either the right `label` or the right local image `ID` for a given `type`.
     */
    readonly image: pulumi.Input<string>;
    /**
     * = (Optional) The ID of the reserved IP that is attached to the server.
     */
    readonly ipId?: pulumi.Input<string>;
    /**
     * The name of the server.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * `organizationId`) The ID of the organization the server is associated with.
     */
    readonly organizationId?: pulumi.Input<string>;
    /**
     * The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
     */
    readonly placementGroupId?: pulumi.Input<string>;
    /**
     * Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
     */
    readonly rootVolume?: pulumi.Input<inputs.InstanceServerRootVolume>;
    /**
     * The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
     */
    readonly securityGroupId?: pulumi.Input<string>;
    /**
     * The state of the server. Possible values are: `started`, `stopped` or `standby`.
     */
    readonly state?: pulumi.Input<string>;
    /**
     * The tags associated with the server.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The commercial type of the server.
     * You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
     * Updates to this field will recreate a new resource.
     */
    readonly type: pulumi.Input<string>;
    /**
     * The user data associated with the server.
     */
    readonly userDatas?: pulumi.Input<pulumi.Input<inputs.InstanceServerUserData>[]>;
    /**
     * `zone`) The zone in which the server should be created.
     */
    readonly zone?: pulumi.Input<string>;
}

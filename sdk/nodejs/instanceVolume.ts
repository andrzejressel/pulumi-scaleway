// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Compute Instance Volumes. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39).
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const serverVolume = new scaleway.InstanceVolume("server_volume", {
 *     sizeInGb: 20,
 *     type: "l_ssd",
 * });
 * ```
 */
export class InstanceVolume extends pulumi.CustomResource {
    /**
     * Get an existing InstanceVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceVolumeState, opts?: pulumi.CustomResourceOptions): InstanceVolume {
        return new InstanceVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/instanceVolume:InstanceVolume';

    /**
     * Returns true if the given object is an instance of InstanceVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceVolume.__pulumiType;
    }

    /**
     * Create a volume based on a image
     */
    public readonly fromSnapshotId!: pulumi.Output<string | undefined>;
    /**
     * If set, the new volume will be copied from this volume. Only one of `sizeInGb`, `fromVolumeId` and `fromVolumeId` should be specified.
     */
    public readonly fromVolumeId!: pulumi.Output<string | undefined>;
    /**
     * The name of the volume. If not provided it will be randomly generated.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * `organizationId`) The ID of the organization the volume is associated with.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * The id of the associated server.
     */
    public /*out*/ readonly serverId!: pulumi.Output<string>;
    /**
     * The size of the volume. Only one of `sizeInGb`, `fromVolumeId` and `fromVolumeId` should be specified.
     */
    public readonly sizeInGb!: pulumi.Output<number>;
    /**
     * The type of the volume. The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD).
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * `zone`) The zone in which the volume should be created.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a InstanceVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceVolumeArgs | InstanceVolumeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as InstanceVolumeState | undefined;
            inputs["fromSnapshotId"] = state ? state.fromSnapshotId : undefined;
            inputs["fromVolumeId"] = state ? state.fromVolumeId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["organizationId"] = state ? state.organizationId : undefined;
            inputs["serverId"] = state ? state.serverId : undefined;
            inputs["sizeInGb"] = state ? state.sizeInGb : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as InstanceVolumeArgs | undefined;
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["fromSnapshotId"] = args ? args.fromSnapshotId : undefined;
            inputs["fromVolumeId"] = args ? args.fromVolumeId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["organizationId"] = args ? args.organizationId : undefined;
            inputs["sizeInGb"] = args ? args.sizeInGb : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["zone"] = args ? args.zone : undefined;
            inputs["serverId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(InstanceVolume.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceVolume resources.
 */
export interface InstanceVolumeState {
    /**
     * Create a volume based on a image
     */
    readonly fromSnapshotId?: pulumi.Input<string>;
    /**
     * If set, the new volume will be copied from this volume. Only one of `sizeInGb`, `fromVolumeId` and `fromVolumeId` should be specified.
     */
    readonly fromVolumeId?: pulumi.Input<string>;
    /**
     * The name of the volume. If not provided it will be randomly generated.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * `organizationId`) The ID of the organization the volume is associated with.
     */
    readonly organizationId?: pulumi.Input<string>;
    /**
     * The id of the associated server.
     */
    readonly serverId?: pulumi.Input<string>;
    /**
     * The size of the volume. Only one of `sizeInGb`, `fromVolumeId` and `fromVolumeId` should be specified.
     */
    readonly sizeInGb?: pulumi.Input<number>;
    /**
     * The type of the volume. The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD).
     */
    readonly type?: pulumi.Input<string>;
    /**
     * `zone`) The zone in which the volume should be created.
     */
    readonly zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceVolume resource.
 */
export interface InstanceVolumeArgs {
    /**
     * Create a volume based on a image
     */
    readonly fromSnapshotId?: pulumi.Input<string>;
    /**
     * If set, the new volume will be copied from this volume. Only one of `sizeInGb`, `fromVolumeId` and `fromVolumeId` should be specified.
     */
    readonly fromVolumeId?: pulumi.Input<string>;
    /**
     * The name of the volume. If not provided it will be randomly generated.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * `organizationId`) The ID of the organization the volume is associated with.
     */
    readonly organizationId?: pulumi.Input<string>;
    /**
     * The size of the volume. Only one of `sizeInGb`, `fromVolumeId` and `fromVolumeId` should be specified.
     */
    readonly sizeInGb?: pulumi.Input<number>;
    /**
     * The type of the volume. The possible values are: `bSsd` (Block SSD), `lSsd` (Local SSD).
     */
    readonly type: pulumi.Input<string>;
    /**
     * `zone`) The zone in which the volume should be created.
     */
    readonly zone?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./accountSshKey";
export * from "./appleSliconValleyServer";
export * from "./baremetalServer";
export * from "./container";
export * from "./containerCron";
export * from "./containerNamespace";
export * from "./database";
export * from "./databaseAcl";
export * from "./databaseBackup";
export * from "./databaseInstance";
export * from "./databasePrivilege";
export * from "./databaseReadReplica";
export * from "./databaseUser";
export * from "./domainRecord";
export * from "./domainZone";
export * from "./flexibleIp";
export * from "./function";
export * from "./functionCron";
export * from "./functionNamespace";
export * from "./getAccountSshKey";
export * from "./getBaremetalOffer";
export * from "./getBaremetalOs";
export * from "./getBaremetalServer";
export * from "./getContainer";
export * from "./getContainerNamespace";
export * from "./getDatabase";
export * from "./getDatabaseAcl";
export * from "./getDatabaseBackup";
export * from "./getDatabaseInstance";
export * from "./getDatabasePrivilege";
export * from "./getDomainRecord";
export * from "./getDomainZone";
export * from "./getFlexibleIp";
export * from "./getFunction";
export * from "./getFunctionNamespace";
export * from "./getInstanceImage";
export * from "./getInstanceIp";
export * from "./getInstanceSecurityGroup";
export * from "./getInstanceServer";
export * from "./getInstanceServers";
export * from "./getInstanceVolume";
export * from "./getIotDevice";
export * from "./getIotHub";
export * from "./getKubernetesCluster";
export * from "./getKubernetesNodePool";
export * from "./getLoadbalancer";
export * from "./getLoadbalancerCertificate";
export * from "./getLoadbalancerIp";
export * from "./getMarketplaceImage";
export * from "./getObjectBucket";
export * from "./getRedisCluster";
export * from "./getRegistryImage";
export * from "./getRegistryNamespace";
export * from "./getVpcGatewayNetwork";
export * from "./getVpcPrivateNetwork";
export * from "./getVpcPublicGateway";
export * from "./getVpcPublicGatewayDhcp";
export * from "./getVpcPublicGatewayDhcpReservation";
export * from "./getVpcPublicGatewayIp";
export * from "./getVpcPublicPatRule";
export * from "./instanceImage";
export * from "./instanceIp";
export * from "./instanceIpReverseDns";
export * from "./instancePlacementGroup";
export * from "./instancePrivateNic";
export * from "./instanceSecurityGroup";
export * from "./instanceSecurityGroupRules";
export * from "./instanceServer";
export * from "./instanceSnapshot";
export * from "./instanceVolume";
export * from "./iotDevice";
export * from "./iotHub";
export * from "./iotNetwork";
export * from "./kubernetesCluster";
export * from "./kubernetesNodePool";
export * from "./loadbalancer";
export * from "./loadbalancerBackend";
export * from "./loadbalancerCertificate";
export * from "./loadbalancerFrontend";
export * from "./loadbalancerIp";
export * from "./loadbalancerRoute";
export * from "./objectBucket";
export * from "./objectBucketPolicy";
export * from "./objectBucketWebsiteConfiguration";
export * from "./provider";
export * from "./redisCluster";
export * from "./registryNamespace";
export * from "./vpcGatewayNetwork";
export * from "./vpcPrivateNetwork";
export * from "./vpcPublicGateway";
export * from "./vpcPublicGatewayDhcp";
export * from "./vpcPublicGatewayDhcpReservation";
export * from "./vpcPublicGatewayIp";
export * from "./vpcPublicGatewayPatRule";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AccountSshKey } from "./accountSshKey";
import { AppleSliconValleyServer } from "./appleSliconValleyServer";
import { BaremetalServer } from "./baremetalServer";
import { Container } from "./container";
import { ContainerCron } from "./containerCron";
import { ContainerNamespace } from "./containerNamespace";
import { Database } from "./database";
import { DatabaseAcl } from "./databaseAcl";
import { DatabaseBackup } from "./databaseBackup";
import { DatabaseInstance } from "./databaseInstance";
import { DatabasePrivilege } from "./databasePrivilege";
import { DatabaseReadReplica } from "./databaseReadReplica";
import { DatabaseUser } from "./databaseUser";
import { DomainRecord } from "./domainRecord";
import { DomainZone } from "./domainZone";
import { FlexibleIp } from "./flexibleIp";
import { Function } from "./function";
import { FunctionCron } from "./functionCron";
import { FunctionNamespace } from "./functionNamespace";
import { InstanceImage } from "./instanceImage";
import { InstanceIp } from "./instanceIp";
import { InstanceIpReverseDns } from "./instanceIpReverseDns";
import { InstancePlacementGroup } from "./instancePlacementGroup";
import { InstancePrivateNic } from "./instancePrivateNic";
import { InstanceSecurityGroup } from "./instanceSecurityGroup";
import { InstanceSecurityGroupRules } from "./instanceSecurityGroupRules";
import { InstanceServer } from "./instanceServer";
import { InstanceSnapshot } from "./instanceSnapshot";
import { InstanceVolume } from "./instanceVolume";
import { IotDevice } from "./iotDevice";
import { IotHub } from "./iotHub";
import { IotNetwork } from "./iotNetwork";
import { KubernetesCluster } from "./kubernetesCluster";
import { KubernetesNodePool } from "./kubernetesNodePool";
import { Loadbalancer } from "./loadbalancer";
import { LoadbalancerBackend } from "./loadbalancerBackend";
import { LoadbalancerCertificate } from "./loadbalancerCertificate";
import { LoadbalancerFrontend } from "./loadbalancerFrontend";
import { LoadbalancerIp } from "./loadbalancerIp";
import { LoadbalancerRoute } from "./loadbalancerRoute";
import { ObjectBucket } from "./objectBucket";
import { ObjectBucketPolicy } from "./objectBucketPolicy";
import { ObjectBucketWebsiteConfiguration } from "./objectBucketWebsiteConfiguration";
import { RedisCluster } from "./redisCluster";
import { RegistryNamespace } from "./registryNamespace";
import { VpcGatewayNetwork } from "./vpcGatewayNetwork";
import { VpcPrivateNetwork } from "./vpcPrivateNetwork";
import { VpcPublicGateway } from "./vpcPublicGateway";
import { VpcPublicGatewayDhcp } from "./vpcPublicGatewayDhcp";
import { VpcPublicGatewayDhcpReservation } from "./vpcPublicGatewayDhcpReservation";
import { VpcPublicGatewayIp } from "./vpcPublicGatewayIp";
import { VpcPublicGatewayPatRule } from "./vpcPublicGatewayPatRule";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:index/accountSshKey:AccountSshKey":
                return new AccountSshKey(name, <any>undefined, { urn })
            case "scaleway:index/appleSliconValleyServer:AppleSliconValleyServer":
                return new AppleSliconValleyServer(name, <any>undefined, { urn })
            case "scaleway:index/baremetalServer:BaremetalServer":
                return new BaremetalServer(name, <any>undefined, { urn })
            case "scaleway:index/container:Container":
                return new Container(name, <any>undefined, { urn })
            case "scaleway:index/containerCron:ContainerCron":
                return new ContainerCron(name, <any>undefined, { urn })
            case "scaleway:index/containerNamespace:ContainerNamespace":
                return new ContainerNamespace(name, <any>undefined, { urn })
            case "scaleway:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "scaleway:index/databaseAcl:DatabaseAcl":
                return new DatabaseAcl(name, <any>undefined, { urn })
            case "scaleway:index/databaseBackup:DatabaseBackup":
                return new DatabaseBackup(name, <any>undefined, { urn })
            case "scaleway:index/databaseInstance:DatabaseInstance":
                return new DatabaseInstance(name, <any>undefined, { urn })
            case "scaleway:index/databasePrivilege:DatabasePrivilege":
                return new DatabasePrivilege(name, <any>undefined, { urn })
            case "scaleway:index/databaseReadReplica:DatabaseReadReplica":
                return new DatabaseReadReplica(name, <any>undefined, { urn })
            case "scaleway:index/databaseUser:DatabaseUser":
                return new DatabaseUser(name, <any>undefined, { urn })
            case "scaleway:index/domainRecord:DomainRecord":
                return new DomainRecord(name, <any>undefined, { urn })
            case "scaleway:index/domainZone:DomainZone":
                return new DomainZone(name, <any>undefined, { urn })
            case "scaleway:index/flexibleIp:FlexibleIp":
                return new FlexibleIp(name, <any>undefined, { urn })
            case "scaleway:index/function:Function":
                return new Function(name, <any>undefined, { urn })
            case "scaleway:index/functionCron:FunctionCron":
                return new FunctionCron(name, <any>undefined, { urn })
            case "scaleway:index/functionNamespace:FunctionNamespace":
                return new FunctionNamespace(name, <any>undefined, { urn })
            case "scaleway:index/instanceImage:InstanceImage":
                return new InstanceImage(name, <any>undefined, { urn })
            case "scaleway:index/instanceIp:InstanceIp":
                return new InstanceIp(name, <any>undefined, { urn })
            case "scaleway:index/instanceIpReverseDns:InstanceIpReverseDns":
                return new InstanceIpReverseDns(name, <any>undefined, { urn })
            case "scaleway:index/instancePlacementGroup:InstancePlacementGroup":
                return new InstancePlacementGroup(name, <any>undefined, { urn })
            case "scaleway:index/instancePrivateNic:InstancePrivateNic":
                return new InstancePrivateNic(name, <any>undefined, { urn })
            case "scaleway:index/instanceSecurityGroup:InstanceSecurityGroup":
                return new InstanceSecurityGroup(name, <any>undefined, { urn })
            case "scaleway:index/instanceSecurityGroupRules:InstanceSecurityGroupRules":
                return new InstanceSecurityGroupRules(name, <any>undefined, { urn })
            case "scaleway:index/instanceServer:InstanceServer":
                return new InstanceServer(name, <any>undefined, { urn })
            case "scaleway:index/instanceSnapshot:InstanceSnapshot":
                return new InstanceSnapshot(name, <any>undefined, { urn })
            case "scaleway:index/instanceVolume:InstanceVolume":
                return new InstanceVolume(name, <any>undefined, { urn })
            case "scaleway:index/iotDevice:IotDevice":
                return new IotDevice(name, <any>undefined, { urn })
            case "scaleway:index/iotHub:IotHub":
                return new IotHub(name, <any>undefined, { urn })
            case "scaleway:index/iotNetwork:IotNetwork":
                return new IotNetwork(name, <any>undefined, { urn })
            case "scaleway:index/kubernetesCluster:KubernetesCluster":
                return new KubernetesCluster(name, <any>undefined, { urn })
            case "scaleway:index/kubernetesNodePool:KubernetesNodePool":
                return new KubernetesNodePool(name, <any>undefined, { urn })
            case "scaleway:index/loadbalancer:Loadbalancer":
                return new Loadbalancer(name, <any>undefined, { urn })
            case "scaleway:index/loadbalancerBackend:LoadbalancerBackend":
                return new LoadbalancerBackend(name, <any>undefined, { urn })
            case "scaleway:index/loadbalancerCertificate:LoadbalancerCertificate":
                return new LoadbalancerCertificate(name, <any>undefined, { urn })
            case "scaleway:index/loadbalancerFrontend:LoadbalancerFrontend":
                return new LoadbalancerFrontend(name, <any>undefined, { urn })
            case "scaleway:index/loadbalancerIp:LoadbalancerIp":
                return new LoadbalancerIp(name, <any>undefined, { urn })
            case "scaleway:index/loadbalancerRoute:LoadbalancerRoute":
                return new LoadbalancerRoute(name, <any>undefined, { urn })
            case "scaleway:index/objectBucket:ObjectBucket":
                return new ObjectBucket(name, <any>undefined, { urn })
            case "scaleway:index/objectBucketPolicy:ObjectBucketPolicy":
                return new ObjectBucketPolicy(name, <any>undefined, { urn })
            case "scaleway:index/objectBucketWebsiteConfiguration:ObjectBucketWebsiteConfiguration":
                return new ObjectBucketWebsiteConfiguration(name, <any>undefined, { urn })
            case "scaleway:index/redisCluster:RedisCluster":
                return new RedisCluster(name, <any>undefined, { urn })
            case "scaleway:index/registryNamespace:RegistryNamespace":
                return new RegistryNamespace(name, <any>undefined, { urn })
            case "scaleway:index/vpcGatewayNetwork:VpcGatewayNetwork":
                return new VpcGatewayNetwork(name, <any>undefined, { urn })
            case "scaleway:index/vpcPrivateNetwork:VpcPrivateNetwork":
                return new VpcPrivateNetwork(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGateway:VpcPublicGateway":
                return new VpcPublicGateway(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGatewayDhcp:VpcPublicGatewayDhcp":
                return new VpcPublicGatewayDhcp(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGatewayDhcpReservation:VpcPublicGatewayDhcpReservation":
                return new VpcPublicGatewayDhcpReservation(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGatewayIp:VpcPublicGatewayIp":
                return new VpcPublicGatewayIp(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGatewayPatRule:VpcPublicGatewayPatRule":
                return new VpcPublicGatewayPatRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "index/accountSshKey", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/appleSliconValleyServer", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/baremetalServer", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/container", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/containerCron", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/containerNamespace", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/database", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/databaseAcl", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/databaseBackup", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/databaseInstance", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/databasePrivilege", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/databaseReadReplica", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/databaseUser", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/domainRecord", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/domainZone", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/flexibleIp", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/function", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/functionCron", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/functionNamespace", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceImage", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceIp", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceIpReverseDns", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instancePlacementGroup", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instancePrivateNic", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceSecurityGroup", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceSecurityGroupRules", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceServer", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceSnapshot", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceVolume", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iotDevice", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iotHub", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iotNetwork", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/kubernetesCluster", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/kubernetesNodePool", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/loadbalancer", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/loadbalancerBackend", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/loadbalancerCertificate", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/loadbalancerFrontend", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/loadbalancerIp", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/loadbalancerRoute", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/objectBucket", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/objectBucketPolicy", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/objectBucketWebsiteConfiguration", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/redisCluster", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/registryNamespace", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcGatewayNetwork", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPrivateNetwork", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGateway", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGatewayDhcp", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGatewayDhcpReservation", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGatewayIp", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGatewayPatRule", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("scaleway", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:scaleway") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

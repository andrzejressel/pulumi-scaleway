// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./accountSshKey";
export * from "./appleSliconValleyServer";
export * from "./baremetalServer";
export * from "./database";
export * from "./databaseACL";
export * from "./databaseInstance";
export * from "./databasePrivilege";
export * from "./databaseUser";
export * from "./domainRecord";
export * from "./getAccountSshKey";
export * from "./getBaremetalOffer";
export * from "./getDatabase";
export * from "./getDatabaseACL";
export * from "./getDatabaseInstance";
export * from "./getDatabasePrivilege";
export * from "./getDomainRecord";
export * from "./getInstanceIP";
export * from "./getInstanceImage";
export * from "./getInstanceSecurityGroup";
export * from "./getInstanceServer";
export * from "./getInstanceVolume";
export * from "./getKubernetesCluster";
export * from "./getKubernetesNodePool";
export * from "./getLoadbalancer";
export * from "./getLoadbalancerIP";
export * from "./getMarketplaceImage";
export * from "./getRegistryImage";
export * from "./getRegistryNamespace";
export * from "./getVpcPrivateNetwork";
export * from "./getVpcPublicGateway";
export * from "./getVpcPublicGatewayDHCP";
export * from "./getVpcPublicGatewayIP";
export * from "./instanceIP";
export * from "./instanceIPReverseDNS";
export * from "./instancePlacementGroup";
export * from "./instancePrivateNIC";
export * from "./instanceSecurityGroup";
export * from "./instanceSecurityGroupRules";
export * from "./instanceServer";
export * from "./instanceSnapshot";
export * from "./instanceVolume";
export * from "./iotdevice";
export * from "./iothub";
export * from "./iotnetwork";
export * from "./iotroute";
export * from "./kubernetesCluster";
export * from "./kubernetesNodePool";
export * from "./loadbalancer";
export * from "./loadbalancerBackend";
export * from "./loadbalancerCertificate";
export * from "./loadbalancerFrontend";
export * from "./loadbalancerIP";
export * from "./objectBucket";
export * from "./provider";
export * from "./registryNamespace";
export * from "./route";
export * from "./vpcGatewayNetwork";
export * from "./vpcPrivateNetwork";
export * from "./vpcPublicGateway";
export * from "./vpcPublicGatewayDHCP";
export * from "./vpcPublicGatewayIP";
export * from "./vpcPublicGatewayPATRule";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AccountSshKey } from "./accountSshKey";
import { AppleSliconValleyServer } from "./appleSliconValleyServer";
import { BaremetalServer } from "./baremetalServer";
import { Database } from "./database";
import { DatabaseACL } from "./databaseACL";
import { DatabaseInstance } from "./databaseInstance";
import { DatabasePrivilege } from "./databasePrivilege";
import { DatabaseUser } from "./databaseUser";
import { DomainRecord } from "./domainRecord";
import { IOTDevice } from "./iotdevice";
import { IOTHub } from "./iothub";
import { IOTNetwork } from "./iotnetwork";
import { IOTRoute } from "./iotroute";
import { InstanceIP } from "./instanceIP";
import { InstanceIPReverseDNS } from "./instanceIPReverseDNS";
import { InstancePlacementGroup } from "./instancePlacementGroup";
import { InstancePrivateNIC } from "./instancePrivateNIC";
import { InstanceSecurityGroup } from "./instanceSecurityGroup";
import { InstanceSecurityGroupRules } from "./instanceSecurityGroupRules";
import { InstanceServer } from "./instanceServer";
import { InstanceSnapshot } from "./instanceSnapshot";
import { InstanceVolume } from "./instanceVolume";
import { KubernetesCluster } from "./kubernetesCluster";
import { KubernetesNodePool } from "./kubernetesNodePool";
import { Loadbalancer } from "./loadbalancer";
import { LoadbalancerBackend } from "./loadbalancerBackend";
import { LoadbalancerCertificate } from "./loadbalancerCertificate";
import { LoadbalancerFrontend } from "./loadbalancerFrontend";
import { LoadbalancerIP } from "./loadbalancerIP";
import { ObjectBucket } from "./objectBucket";
import { RegistryNamespace } from "./registryNamespace";
import { Route } from "./route";
import { VpcGatewayNetwork } from "./vpcGatewayNetwork";
import { VpcPrivateNetwork } from "./vpcPrivateNetwork";
import { VpcPublicGateway } from "./vpcPublicGateway";
import { VpcPublicGatewayDHCP } from "./vpcPublicGatewayDHCP";
import { VpcPublicGatewayIP } from "./vpcPublicGatewayIP";
import { VpcPublicGatewayPATRule } from "./vpcPublicGatewayPATRule";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:index/accountSshKey:AccountSshKey":
                return new AccountSshKey(name, <any>undefined, { urn })
            case "scaleway:index/appleSliconValleyServer:AppleSliconValleyServer":
                return new AppleSliconValleyServer(name, <any>undefined, { urn })
            case "scaleway:index/baremetalServer:BaremetalServer":
                return new BaremetalServer(name, <any>undefined, { urn })
            case "scaleway:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "scaleway:index/databaseACL:DatabaseACL":
                return new DatabaseACL(name, <any>undefined, { urn })
            case "scaleway:index/databaseInstance:DatabaseInstance":
                return new DatabaseInstance(name, <any>undefined, { urn })
            case "scaleway:index/databasePrivilege:DatabasePrivilege":
                return new DatabasePrivilege(name, <any>undefined, { urn })
            case "scaleway:index/databaseUser:DatabaseUser":
                return new DatabaseUser(name, <any>undefined, { urn })
            case "scaleway:index/domainRecord:DomainRecord":
                return new DomainRecord(name, <any>undefined, { urn })
            case "scaleway:index/iOTDevice:IOTDevice":
                return new IOTDevice(name, <any>undefined, { urn })
            case "scaleway:index/iOTHub:IOTHub":
                return new IOTHub(name, <any>undefined, { urn })
            case "scaleway:index/iOTNetwork:IOTNetwork":
                return new IOTNetwork(name, <any>undefined, { urn })
            case "scaleway:index/iOTRoute:IOTRoute":
                return new IOTRoute(name, <any>undefined, { urn })
            case "scaleway:index/instanceIP:InstanceIP":
                return new InstanceIP(name, <any>undefined, { urn })
            case "scaleway:index/instanceIPReverseDNS:InstanceIPReverseDNS":
                return new InstanceIPReverseDNS(name, <any>undefined, { urn })
            case "scaleway:index/instancePlacementGroup:InstancePlacementGroup":
                return new InstancePlacementGroup(name, <any>undefined, { urn })
            case "scaleway:index/instancePrivateNIC:InstancePrivateNIC":
                return new InstancePrivateNIC(name, <any>undefined, { urn })
            case "scaleway:index/instanceSecurityGroup:InstanceSecurityGroup":
                return new InstanceSecurityGroup(name, <any>undefined, { urn })
            case "scaleway:index/instanceSecurityGroupRules:InstanceSecurityGroupRules":
                return new InstanceSecurityGroupRules(name, <any>undefined, { urn })
            case "scaleway:index/instanceServer:InstanceServer":
                return new InstanceServer(name, <any>undefined, { urn })
            case "scaleway:index/instanceSnapshot:InstanceSnapshot":
                return new InstanceSnapshot(name, <any>undefined, { urn })
            case "scaleway:index/instanceVolume:InstanceVolume":
                return new InstanceVolume(name, <any>undefined, { urn })
            case "scaleway:index/kubernetesCluster:KubernetesCluster":
                return new KubernetesCluster(name, <any>undefined, { urn })
            case "scaleway:index/kubernetesNodePool:KubernetesNodePool":
                return new KubernetesNodePool(name, <any>undefined, { urn })
            case "scaleway:index/loadbalancer:Loadbalancer":
                return new Loadbalancer(name, <any>undefined, { urn })
            case "scaleway:index/loadbalancerBackend:LoadbalancerBackend":
                return new LoadbalancerBackend(name, <any>undefined, { urn })
            case "scaleway:index/loadbalancerCertificate:LoadbalancerCertificate":
                return new LoadbalancerCertificate(name, <any>undefined, { urn })
            case "scaleway:index/loadbalancerFrontend:LoadbalancerFrontend":
                return new LoadbalancerFrontend(name, <any>undefined, { urn })
            case "scaleway:index/loadbalancerIP:LoadbalancerIP":
                return new LoadbalancerIP(name, <any>undefined, { urn })
            case "scaleway:index/objectBucket:ObjectBucket":
                return new ObjectBucket(name, <any>undefined, { urn })
            case "scaleway:index/registryNamespace:RegistryNamespace":
                return new RegistryNamespace(name, <any>undefined, { urn })
            case "scaleway:index/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "scaleway:index/vpcGatewayNetwork:VpcGatewayNetwork":
                return new VpcGatewayNetwork(name, <any>undefined, { urn })
            case "scaleway:index/vpcPrivateNetwork:VpcPrivateNetwork":
                return new VpcPrivateNetwork(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGateway:VpcPublicGateway":
                return new VpcPublicGateway(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGatewayDHCP:VpcPublicGatewayDHCP":
                return new VpcPublicGatewayDHCP(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGatewayIP:VpcPublicGatewayIP":
                return new VpcPublicGatewayIP(name, <any>undefined, { urn })
            case "scaleway:index/vpcPublicGatewayPATRule:VpcPublicGatewayPATRule":
                return new VpcPublicGatewayPATRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "index/accountSshKey", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/appleSliconValleyServer", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/baremetalServer", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/database", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/databaseACL", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/databaseInstance", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/databasePrivilege", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/databaseUser", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/domainRecord", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iOTDevice", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iOTHub", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iOTNetwork", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/iOTRoute", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceIP", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceIPReverseDNS", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instancePlacementGroup", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instancePrivateNIC", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceSecurityGroup", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceSecurityGroupRules", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceServer", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceSnapshot", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/instanceVolume", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/kubernetesCluster", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/kubernetesNodePool", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/loadbalancer", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/loadbalancerBackend", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/loadbalancerCertificate", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/loadbalancerFrontend", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/loadbalancerIP", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/objectBucket", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/registryNamespace", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/route", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcGatewayNetwork", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPrivateNetwork", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGateway", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGatewayDHCP", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGatewayIP", _module)
pulumi.runtime.registerResourceModule("scaleway", "index/vpcPublicGatewayPATRule", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("scaleway", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:scaleway") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

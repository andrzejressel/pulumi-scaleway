// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// **DEPRECATED**: This resource is deprecated and will be removed in `v2.0+`.
// Please use `InstanceServer` instead.
//
// Provides user data for servers.
// For additional details please refer to [API documentation](https://developer.scaleway.com/#user-data).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		base, err := scaleway.NewServer(ctx, "base", &scaleway.ServerArgs{
// 			Image: pulumi.String("5faef9cd-ea9b-4a63-9171-9e26bec03dbc"),
// 			Type:  pulumi.String("C1"),
// 			State: pulumi.String("stopped"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = scaleway.NewUserData(ctx, "gcp", &scaleway.UserDataArgs{
// 			Server: base.ID(),
// 			Key:    pulumi.String("gcp_username"),
// 			Value:  pulumi.String("supersecret"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type UserData struct {
	pulumi.CustomResourceState

	// The key of the user data object
	Key pulumi.StringOutput `pulumi:"key"`
	// ID of server to associate the user data with
	Server pulumi.StringOutput `pulumi:"server"`
	// The value of the user data object
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewUserData registers a new resource with the given unique name, arguments, and options.
func NewUserData(ctx *pulumi.Context,
	name string, args *UserDataArgs, opts ...pulumi.ResourceOption) (*UserData, error) {
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	if args == nil || args.Server == nil {
		return nil, errors.New("missing required argument 'Server'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	if args == nil {
		args = &UserDataArgs{}
	}
	var resource UserData
	err := ctx.RegisterResource("scaleway:index/userData:UserData", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserData gets an existing UserData resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserData(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserDataState, opts ...pulumi.ResourceOption) (*UserData, error) {
	var resource UserData
	err := ctx.ReadResource("scaleway:index/userData:UserData", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserData resources.
type userDataState struct {
	// The key of the user data object
	Key *string `pulumi:"key"`
	// ID of server to associate the user data with
	Server *string `pulumi:"server"`
	// The value of the user data object
	Value *string `pulumi:"value"`
}

type UserDataState struct {
	// The key of the user data object
	Key pulumi.StringPtrInput
	// ID of server to associate the user data with
	Server pulumi.StringPtrInput
	// The value of the user data object
	Value pulumi.StringPtrInput
}

func (UserDataState) ElementType() reflect.Type {
	return reflect.TypeOf((*userDataState)(nil)).Elem()
}

type userDataArgs struct {
	// The key of the user data object
	Key string `pulumi:"key"`
	// ID of server to associate the user data with
	Server string `pulumi:"server"`
	// The value of the user data object
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a UserData resource.
type UserDataArgs struct {
	// The key of the user data object
	Key pulumi.StringInput
	// ID of server to associate the user data with
	Server pulumi.StringInput
	// The value of the user data object
	Value pulumi.StringInput
}

func (UserDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userDataArgs)(nil)).Elem()
}

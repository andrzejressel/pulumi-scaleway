// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Scaleway Compute Instance IPs Reverse DNS.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		serverIp, err := scaleway.NewInstanceIP(ctx, "serverIp", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = scaleway.NewInstanceIPReverseDNS(ctx, "reverse", &scaleway.InstanceIPReverseDNSArgs{
// 			IpId:    serverIp.ID(),
// 			Reverse: pulumi.String("www.scaleway.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// IPs reverse DNS can be imported using the `{zone}/{id}`, e.g. bash
//
// ```sh
//  $ pulumi import scaleway:index/instanceIPReverseDNS:InstanceIPReverseDNS reverse fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type InstanceIPReverseDNS struct {
	pulumi.CustomResourceState

	// The IP ID
	IpId pulumi.StringOutput `pulumi:"ipId"`
	// The reverse DNS for this IP.
	Reverse pulumi.StringOutput `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewInstanceIPReverseDNS registers a new resource with the given unique name, arguments, and options.
func NewInstanceIPReverseDNS(ctx *pulumi.Context,
	name string, args *InstanceIPReverseDNSArgs, opts ...pulumi.ResourceOption) (*InstanceIPReverseDNS, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpId == nil {
		return nil, errors.New("invalid value for required argument 'IpId'")
	}
	if args.Reverse == nil {
		return nil, errors.New("invalid value for required argument 'Reverse'")
	}
	var resource InstanceIPReverseDNS
	err := ctx.RegisterResource("scaleway:index/instanceIPReverseDNS:InstanceIPReverseDNS", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceIPReverseDNS gets an existing InstanceIPReverseDNS resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceIPReverseDNS(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceIPReverseDNSState, opts ...pulumi.ResourceOption) (*InstanceIPReverseDNS, error) {
	var resource InstanceIPReverseDNS
	err := ctx.ReadResource("scaleway:index/instanceIPReverseDNS:InstanceIPReverseDNS", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceIPReverseDNS resources.
type instanceIPReverseDNSState struct {
	// The IP ID
	IpId *string `pulumi:"ipId"`
	// The reverse DNS for this IP.
	Reverse *string `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

type InstanceIPReverseDNSState struct {
	// The IP ID
	IpId pulumi.StringPtrInput
	// The reverse DNS for this IP.
	Reverse pulumi.StringPtrInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (InstanceIPReverseDNSState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceIPReverseDNSState)(nil)).Elem()
}

type instanceIPReverseDNSArgs struct {
	// The IP ID
	IpId string `pulumi:"ipId"`
	// The reverse DNS for this IP.
	Reverse string `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a InstanceIPReverseDNS resource.
type InstanceIPReverseDNSArgs struct {
	// The IP ID
	IpId pulumi.StringInput
	// The reverse DNS for this IP.
	Reverse pulumi.StringInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (InstanceIPReverseDNSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceIPReverseDNSArgs)(nil)).Elem()
}

type InstanceIPReverseDNSInput interface {
	pulumi.Input

	ToInstanceIPReverseDNSOutput() InstanceIPReverseDNSOutput
	ToInstanceIPReverseDNSOutputWithContext(ctx context.Context) InstanceIPReverseDNSOutput
}

func (*InstanceIPReverseDNS) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIPReverseDNS)(nil)).Elem()
}

func (i *InstanceIPReverseDNS) ToInstanceIPReverseDNSOutput() InstanceIPReverseDNSOutput {
	return i.ToInstanceIPReverseDNSOutputWithContext(context.Background())
}

func (i *InstanceIPReverseDNS) ToInstanceIPReverseDNSOutputWithContext(ctx context.Context) InstanceIPReverseDNSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIPReverseDNSOutput)
}

type InstanceIPReverseDNSOutput struct{ *pulumi.OutputState }

func (InstanceIPReverseDNSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIPReverseDNS)(nil)).Elem()
}

func (o InstanceIPReverseDNSOutput) ToInstanceIPReverseDNSOutput() InstanceIPReverseDNSOutput {
	return o
}

func (o InstanceIPReverseDNSOutput) ToInstanceIPReverseDNSOutputWithContext(ctx context.Context) InstanceIPReverseDNSOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIPReverseDNSInput)(nil)).Elem(), &InstanceIPReverseDNS{})
	pulumi.RegisterOutputType(InstanceIPReverseDNSOutput{})
}

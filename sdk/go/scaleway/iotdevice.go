// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// IoT devices can be imported using the `{region}/{id}`, e.g. bash
//
// ```sh
//  $ pulumi import scaleway:index/iOTDevice:IOTDevice device01 fr-par/11111111-1111-1111-1111-111111111111
// ```
type IOTDevice struct {
	pulumi.CustomResourceState

	// Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
	AllowInsecure pulumi.BoolPtrOutput `pulumi:"allowInsecure"`
	// Allow more than one simultaneous connection using the same device credentials.
	AllowMultipleConnections pulumi.BoolPtrOutput `pulumi:"allowMultipleConnections"`
	// The certificate bundle of the device.
	Certificate IOTDeviceCertificateOutput `pulumi:"certificate"`
	// The date and time the device was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the IoT device (e.g. `living room`).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the hub on which this device will be created.
	HubId pulumi.StringOutput `pulumi:"hubId"`
	// The current connection status of the device.
	IsConnected pulumi.BoolOutput `pulumi:"isConnected"`
	// The last MQTT activity of the device.
	LastActivityAt pulumi.StringOutput `pulumi:"lastActivityAt"`
	// Rules that define which messages are authorized or denied based on their topic.
	MessageFilters IOTDeviceMessageFiltersPtrOutput `pulumi:"messageFilters"`
	// The name of the IoT device you want to create (e.g. `my-device`).
	Name pulumi.StringOutput `pulumi:"name"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// The current status of the device.
	Status pulumi.StringOutput `pulumi:"status"`
	// The date and time the device resource was updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewIOTDevice registers a new resource with the given unique name, arguments, and options.
func NewIOTDevice(ctx *pulumi.Context,
	name string, args *IOTDeviceArgs, opts ...pulumi.ResourceOption) (*IOTDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HubId == nil {
		return nil, errors.New("invalid value for required argument 'HubId'")
	}
	var resource IOTDevice
	err := ctx.RegisterResource("scaleway:index/iOTDevice:IOTDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIOTDevice gets an existing IOTDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIOTDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IOTDeviceState, opts ...pulumi.ResourceOption) (*IOTDevice, error) {
	var resource IOTDevice
	err := ctx.ReadResource("scaleway:index/iOTDevice:IOTDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IOTDevice resources.
type iotdeviceState struct {
	// Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
	AllowInsecure *bool `pulumi:"allowInsecure"`
	// Allow more than one simultaneous connection using the same device credentials.
	AllowMultipleConnections *bool `pulumi:"allowMultipleConnections"`
	// The certificate bundle of the device.
	Certificate *IOTDeviceCertificate `pulumi:"certificate"`
	// The date and time the device was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the IoT device (e.g. `living room`).
	Description *string `pulumi:"description"`
	// The ID of the hub on which this device will be created.
	HubId *string `pulumi:"hubId"`
	// The current connection status of the device.
	IsConnected *bool `pulumi:"isConnected"`
	// The last MQTT activity of the device.
	LastActivityAt *string `pulumi:"lastActivityAt"`
	// Rules that define which messages are authorized or denied based on their topic.
	MessageFilters *IOTDeviceMessageFilters `pulumi:"messageFilters"`
	// The name of the IoT device you want to create (e.g. `my-device`).
	Name *string `pulumi:"name"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// The current status of the device.
	Status *string `pulumi:"status"`
	// The date and time the device resource was updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type IOTDeviceState struct {
	// Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
	AllowInsecure pulumi.BoolPtrInput
	// Allow more than one simultaneous connection using the same device credentials.
	AllowMultipleConnections pulumi.BoolPtrInput
	// The certificate bundle of the device.
	Certificate IOTDeviceCertificatePtrInput
	// The date and time the device was created.
	CreatedAt pulumi.StringPtrInput
	// The description of the IoT device (e.g. `living room`).
	Description pulumi.StringPtrInput
	// The ID of the hub on which this device will be created.
	HubId pulumi.StringPtrInput
	// The current connection status of the device.
	IsConnected pulumi.BoolPtrInput
	// The last MQTT activity of the device.
	LastActivityAt pulumi.StringPtrInput
	// Rules that define which messages are authorized or denied based on their topic.
	MessageFilters IOTDeviceMessageFiltersPtrInput
	// The name of the IoT device you want to create (e.g. `my-device`).
	Name pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// The current status of the device.
	Status pulumi.StringPtrInput
	// The date and time the device resource was updated.
	UpdatedAt pulumi.StringPtrInput
}

func (IOTDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*iotdeviceState)(nil)).Elem()
}

type iotdeviceArgs struct {
	// Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
	AllowInsecure *bool `pulumi:"allowInsecure"`
	// Allow more than one simultaneous connection using the same device credentials.
	AllowMultipleConnections *bool `pulumi:"allowMultipleConnections"`
	// The certificate bundle of the device.
	Certificate *IOTDeviceCertificate `pulumi:"certificate"`
	// The description of the IoT device (e.g. `living room`).
	Description *string `pulumi:"description"`
	// The ID of the hub on which this device will be created.
	HubId string `pulumi:"hubId"`
	// Rules that define which messages are authorized or denied based on their topic.
	MessageFilters *IOTDeviceMessageFilters `pulumi:"messageFilters"`
	// The name of the IoT device you want to create (e.g. `my-device`).
	Name *string `pulumi:"name"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a IOTDevice resource.
type IOTDeviceArgs struct {
	// Allow plain and server-authenticated TLS connections in addition to mutually-authenticated ones.
	AllowInsecure pulumi.BoolPtrInput
	// Allow more than one simultaneous connection using the same device credentials.
	AllowMultipleConnections pulumi.BoolPtrInput
	// The certificate bundle of the device.
	Certificate IOTDeviceCertificatePtrInput
	// The description of the IoT device (e.g. `living room`).
	Description pulumi.StringPtrInput
	// The ID of the hub on which this device will be created.
	HubId pulumi.StringInput
	// Rules that define which messages are authorized or denied based on their topic.
	MessageFilters IOTDeviceMessageFiltersPtrInput
	// The name of the IoT device you want to create (e.g. `my-device`).
	Name pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
}

func (IOTDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iotdeviceArgs)(nil)).Elem()
}

type IOTDeviceInput interface {
	pulumi.Input

	ToIOTDeviceOutput() IOTDeviceOutput
	ToIOTDeviceOutputWithContext(ctx context.Context) IOTDeviceOutput
}

func (*IOTDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**IOTDevice)(nil)).Elem()
}

func (i *IOTDevice) ToIOTDeviceOutput() IOTDeviceOutput {
	return i.ToIOTDeviceOutputWithContext(context.Background())
}

func (i *IOTDevice) ToIOTDeviceOutputWithContext(ctx context.Context) IOTDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IOTDeviceOutput)
}

type IOTDeviceOutput struct{ *pulumi.OutputState }

func (IOTDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IOTDevice)(nil)).Elem()
}

func (o IOTDeviceOutput) ToIOTDeviceOutput() IOTDeviceOutput {
	return o
}

func (o IOTDeviceOutput) ToIOTDeviceOutputWithContext(ctx context.Context) IOTDeviceOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IOTDeviceInput)(nil)).Elem(), &IOTDevice{})
	pulumi.RegisterOutputType(IOTDeviceOutput{})
}

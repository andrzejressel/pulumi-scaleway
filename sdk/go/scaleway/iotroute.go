// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IOTRoute struct {
	pulumi.CustomResourceState

	// The date and time of the creation of the IoT Route
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Database Route parameters
	Database IOTRouteDatabasePtrOutput `pulumi:"database"`
	// The ID of the route's hub
	HubId pulumi.StringOutput `pulumi:"hubId"`
	// The name of the route
	Name pulumi.StringOutput `pulumi:"name"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// Rest Route parameters
	Rest IOTRouteRestPtrOutput `pulumi:"rest"`
	// S3 Route parameters
	S3 IOTRouteS3PtrOutput `pulumi:"s3"`
	// The Topic the route subscribes to (wildcards allowed)
	Topic pulumi.StringOutput `pulumi:"topic"`
}

// NewIOTRoute registers a new resource with the given unique name, arguments, and options.
func NewIOTRoute(ctx *pulumi.Context,
	name string, args *IOTRouteArgs, opts ...pulumi.ResourceOption) (*IOTRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HubId == nil {
		return nil, errors.New("invalid value for required argument 'HubId'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	var resource IOTRoute
	err := ctx.RegisterResource("scaleway:index/iOTRoute:IOTRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIOTRoute gets an existing IOTRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIOTRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IOTRouteState, opts ...pulumi.ResourceOption) (*IOTRoute, error) {
	var resource IOTRoute
	err := ctx.ReadResource("scaleway:index/iOTRoute:IOTRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IOTRoute resources.
type iotrouteState struct {
	// The date and time of the creation of the IoT Route
	CreatedAt *string `pulumi:"createdAt"`
	// Database Route parameters
	Database *IOTRouteDatabase `pulumi:"database"`
	// The ID of the route's hub
	HubId *string `pulumi:"hubId"`
	// The name of the route
	Name *string `pulumi:"name"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// Rest Route parameters
	Rest *IOTRouteRest `pulumi:"rest"`
	// S3 Route parameters
	S3 *IOTRouteS3 `pulumi:"s3"`
	// The Topic the route subscribes to (wildcards allowed)
	Topic *string `pulumi:"topic"`
}

type IOTRouteState struct {
	// The date and time of the creation of the IoT Route
	CreatedAt pulumi.StringPtrInput
	// Database Route parameters
	Database IOTRouteDatabasePtrInput
	// The ID of the route's hub
	HubId pulumi.StringPtrInput
	// The name of the route
	Name pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// Rest Route parameters
	Rest IOTRouteRestPtrInput
	// S3 Route parameters
	S3 IOTRouteS3PtrInput
	// The Topic the route subscribes to (wildcards allowed)
	Topic pulumi.StringPtrInput
}

func (IOTRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*iotrouteState)(nil)).Elem()
}

type iotrouteArgs struct {
	// Database Route parameters
	Database *IOTRouteDatabase `pulumi:"database"`
	// The ID of the route's hub
	HubId string `pulumi:"hubId"`
	// The name of the route
	Name *string `pulumi:"name"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// Rest Route parameters
	Rest *IOTRouteRest `pulumi:"rest"`
	// S3 Route parameters
	S3 *IOTRouteS3 `pulumi:"s3"`
	// The Topic the route subscribes to (wildcards allowed)
	Topic string `pulumi:"topic"`
}

// The set of arguments for constructing a IOTRoute resource.
type IOTRouteArgs struct {
	// Database Route parameters
	Database IOTRouteDatabasePtrInput
	// The ID of the route's hub
	HubId pulumi.StringInput
	// The name of the route
	Name pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// Rest Route parameters
	Rest IOTRouteRestPtrInput
	// S3 Route parameters
	S3 IOTRouteS3PtrInput
	// The Topic the route subscribes to (wildcards allowed)
	Topic pulumi.StringInput
}

func (IOTRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iotrouteArgs)(nil)).Elem()
}

type IOTRouteInput interface {
	pulumi.Input

	ToIOTRouteOutput() IOTRouteOutput
	ToIOTRouteOutputWithContext(ctx context.Context) IOTRouteOutput
}

func (*IOTRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**IOTRoute)(nil)).Elem()
}

func (i *IOTRoute) ToIOTRouteOutput() IOTRouteOutput {
	return i.ToIOTRouteOutputWithContext(context.Background())
}

func (i *IOTRoute) ToIOTRouteOutputWithContext(ctx context.Context) IOTRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IOTRouteOutput)
}

type IOTRouteOutput struct{ *pulumi.OutputState }

func (IOTRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IOTRoute)(nil)).Elem()
}

func (o IOTRouteOutput) ToIOTRouteOutput() IOTRouteOutput {
	return o
}

func (o IOTRouteOutput) ToIOTRouteOutputWithContext(ctx context.Context) IOTRouteOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IOTRouteInput)(nil)).Elem(), &IOTRoute{})
	pulumi.RegisterOutputType(IOTRouteOutput{})
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates and manages Scaleway Kubernetes cluster pools. For more information, see [the documentation](https://developers.scaleway.com/en/products/k8s/api/).
//
// ## Examples
//
// ### Basic
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		jack, err := scaleway.NewKubernetesClusterBeta(ctx, "jack", &scaleway.KubernetesClusterBetaArgs{
// 			Version: pulumi.String("1.18.0"),
// 			Cni:     pulumi.String("cilium"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = scaleway.NewKubernetesNodePoolBeta(ctx, "bill", &scaleway.KubernetesNodePoolBetaArgs{
// 			ClusterId:        jack.ID(),
// 			NodeType:         pulumi.String("GP1-S"),
// 			Size:             pulumi.Int(3),
// 			MinSize:          pulumi.Int(0),
// 			MaxSize:          pulumi.Int(10),
// 			Autoscaling:      pulumi.Bool(true),
// 			Autohealing:      pulumi.Bool(true),
// 			ContainerRuntime: pulumi.String("docker"),
// 			PlacementGroupId: pulumi.String("1267e3fd-a51c-49ed-ad12-857092ee3a3d"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type KubernetesNodePoolBeta struct {
	pulumi.CustomResourceState

	// Enables the autohealing feature for this pool.
	Autohealing pulumi.BoolPtrOutput `pulumi:"autohealing"`
	// Enables the autoscaling feature for this pool.
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling pulumi.BoolPtrOutput `pulumi:"autoscaling"`
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The container runtime of the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime pulumi.StringPtrOutput `pulumi:"containerRuntime"`
	// The creation date of the pool.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The actual size of the pool
	CurrentSize pulumi.IntOutput `pulumi:"currentSize"`
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize pulumi.IntOutput `pulumi:"maxSize"`
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize pulumi.IntPtrOutput `pulumi:"minSize"`
	// The name for the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The commercial type of the pool instances.
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// (List of) The nodes in the default pool.
	Nodes KubernetesNodePoolBetaNodeArrayOutput `pulumi:"nodes"`
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId pulumi.StringPtrOutput `pulumi:"placementGroupId"`
	// `region`) The region in which the pool should be created.
	Region pulumi.StringOutput `pulumi:"region"`
	// The size of the pool.
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size pulumi.IntOutput `pulumi:"size"`
	// The status of the node.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tags associated with the pool.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The last update date of the pool.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The version of the pool.
	Version pulumi.StringOutput `pulumi:"version"`
	// Whether to wait for the pool to be ready.
	WaitForPoolReady pulumi.BoolPtrOutput `pulumi:"waitForPoolReady"`
}

// NewKubernetesNodePoolBeta registers a new resource with the given unique name, arguments, and options.
func NewKubernetesNodePoolBeta(ctx *pulumi.Context,
	name string, args *KubernetesNodePoolBetaArgs, opts ...pulumi.ResourceOption) (*KubernetesNodePoolBeta, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil || args.NodeType == nil {
		return nil, errors.New("missing required argument 'NodeType'")
	}
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	if args == nil {
		args = &KubernetesNodePoolBetaArgs{}
	}
	var resource KubernetesNodePoolBeta
	err := ctx.RegisterResource("scaleway:index/kubernetesNodePoolBeta:KubernetesNodePoolBeta", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesNodePoolBeta gets an existing KubernetesNodePoolBeta resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesNodePoolBeta(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesNodePoolBetaState, opts ...pulumi.ResourceOption) (*KubernetesNodePoolBeta, error) {
	var resource KubernetesNodePoolBeta
	err := ctx.ReadResource("scaleway:index/kubernetesNodePoolBeta:KubernetesNodePoolBeta", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesNodePoolBeta resources.
type kubernetesNodePoolBetaState struct {
	// Enables the autohealing feature for this pool.
	Autohealing *bool `pulumi:"autohealing"`
	// Enables the autoscaling feature for this pool.
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling *bool `pulumi:"autoscaling"`
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId *string `pulumi:"clusterId"`
	// The container runtime of the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime *string `pulumi:"containerRuntime"`
	// The creation date of the pool.
	CreatedAt *string `pulumi:"createdAt"`
	// The actual size of the pool
	CurrentSize *int `pulumi:"currentSize"`
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize *int `pulumi:"maxSize"`
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize *int `pulumi:"minSize"`
	// The name for the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	Name *string `pulumi:"name"`
	// The commercial type of the pool instances.
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType *string `pulumi:"nodeType"`
	// (List of) The nodes in the default pool.
	Nodes []KubernetesNodePoolBetaNode `pulumi:"nodes"`
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// `region`) The region in which the pool should be created.
	Region *string `pulumi:"region"`
	// The size of the pool.
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size *int `pulumi:"size"`
	// The status of the node.
	Status *string `pulumi:"status"`
	// The tags associated with the pool.
	Tags []string `pulumi:"tags"`
	// The last update date of the pool.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The version of the pool.
	Version *string `pulumi:"version"`
	// Whether to wait for the pool to be ready.
	WaitForPoolReady *bool `pulumi:"waitForPoolReady"`
}

type KubernetesNodePoolBetaState struct {
	// Enables the autohealing feature for this pool.
	Autohealing pulumi.BoolPtrInput
	// Enables the autoscaling feature for this pool.
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling pulumi.BoolPtrInput
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId pulumi.StringPtrInput
	// The container runtime of the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime pulumi.StringPtrInput
	// The creation date of the pool.
	CreatedAt pulumi.StringPtrInput
	// The actual size of the pool
	CurrentSize pulumi.IntPtrInput
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize pulumi.IntPtrInput
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize pulumi.IntPtrInput
	// The name for the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	Name pulumi.StringPtrInput
	// The commercial type of the pool instances.
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType pulumi.StringPtrInput
	// (List of) The nodes in the default pool.
	Nodes KubernetesNodePoolBetaNodeArrayInput
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId pulumi.StringPtrInput
	// `region`) The region in which the pool should be created.
	Region pulumi.StringPtrInput
	// The size of the pool.
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size pulumi.IntPtrInput
	// The status of the node.
	Status pulumi.StringPtrInput
	// The tags associated with the pool.
	Tags pulumi.StringArrayInput
	// The last update date of the pool.
	UpdatedAt pulumi.StringPtrInput
	// The version of the pool.
	Version pulumi.StringPtrInput
	// Whether to wait for the pool to be ready.
	WaitForPoolReady pulumi.BoolPtrInput
}

func (KubernetesNodePoolBetaState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesNodePoolBetaState)(nil)).Elem()
}

type kubernetesNodePoolBetaArgs struct {
	// Enables the autohealing feature for this pool.
	Autohealing *bool `pulumi:"autohealing"`
	// Enables the autoscaling feature for this pool.
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling *bool `pulumi:"autoscaling"`
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId string `pulumi:"clusterId"`
	// The container runtime of the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime *string `pulumi:"containerRuntime"`
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize *int `pulumi:"maxSize"`
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize *int `pulumi:"minSize"`
	// The name for the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	Name *string `pulumi:"name"`
	// The commercial type of the pool instances.
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType string `pulumi:"nodeType"`
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// `region`) The region in which the pool should be created.
	Region *string `pulumi:"region"`
	// The size of the pool.
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size int `pulumi:"size"`
	// The tags associated with the pool.
	Tags []string `pulumi:"tags"`
	// Whether to wait for the pool to be ready.
	WaitForPoolReady *bool `pulumi:"waitForPoolReady"`
}

// The set of arguments for constructing a KubernetesNodePoolBeta resource.
type KubernetesNodePoolBetaArgs struct {
	// Enables the autohealing feature for this pool.
	Autohealing pulumi.BoolPtrInput
	// Enables the autoscaling feature for this pool.
	// > **Important:** When enabled, an update of the `size` will not be taken into account.
	Autoscaling pulumi.BoolPtrInput
	// The ID of the Kubernetes cluster on which this pool will be created.
	ClusterId pulumi.StringInput
	// The container runtime of the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	ContainerRuntime pulumi.StringPtrInput
	// The maximum size of the pool, used by the autoscaling feature.
	MaxSize pulumi.IntPtrInput
	// The minimum size of the pool, used by the autoscaling feature.
	MinSize pulumi.IntPtrInput
	// The name for the pool.
	// > **Important:** Updates to this field will recreate a new resource.
	Name pulumi.StringPtrInput
	// The commercial type of the pool instances.
	// > **Important:** Updates to this field will recreate a new resource.
	NodeType pulumi.StringInput
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the nodes of the pool will be attached to.
	// > **Important:** Updates to this field will recreate a new resource.
	PlacementGroupId pulumi.StringPtrInput
	// `region`) The region in which the pool should be created.
	Region pulumi.StringPtrInput
	// The size of the pool.
	// > **Important:** This field will only be used at creation if autoscaling is enabled.
	Size pulumi.IntInput
	// The tags associated with the pool.
	Tags pulumi.StringArrayInput
	// Whether to wait for the pool to be ready.
	WaitForPoolReady pulumi.BoolPtrInput
}

func (KubernetesNodePoolBetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesNodePoolBetaArgs)(nil)).Elem()
}

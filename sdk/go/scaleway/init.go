// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "scaleway:index/accountSshKey:AccountSshKey":
		r = &AccountSshKey{}
	case "scaleway:index/appleSliconValleyServer:AppleSliconValleyServer":
		r = &AppleSliconValleyServer{}
	case "scaleway:index/baremetalServer:BaremetalServer":
		r = &BaremetalServer{}
	case "scaleway:index/database:Database":
		r = &Database{}
	case "scaleway:index/databaseACL:DatabaseACL":
		r = &DatabaseACL{}
	case "scaleway:index/databaseInstance:DatabaseInstance":
		r = &DatabaseInstance{}
	case "scaleway:index/databasePrivilege:DatabasePrivilege":
		r = &DatabasePrivilege{}
	case "scaleway:index/databaseUser:DatabaseUser":
		r = &DatabaseUser{}
	case "scaleway:index/domainRecord:DomainRecord":
		r = &DomainRecord{}
	case "scaleway:index/iOTDevice:IOTDevice":
		r = &IOTDevice{}
	case "scaleway:index/iOTHub:IOTHub":
		r = &IOTHub{}
	case "scaleway:index/iOTNetwork:IOTNetwork":
		r = &IOTNetwork{}
	case "scaleway:index/iOTRoute:IOTRoute":
		r = &IOTRoute{}
	case "scaleway:index/instanceIP:InstanceIP":
		r = &InstanceIP{}
	case "scaleway:index/instanceIPReverseDNS:InstanceIPReverseDNS":
		r = &InstanceIPReverseDNS{}
	case "scaleway:index/instancePlacementGroup:InstancePlacementGroup":
		r = &InstancePlacementGroup{}
	case "scaleway:index/instancePrivateNIC:InstancePrivateNIC":
		r = &InstancePrivateNIC{}
	case "scaleway:index/instanceSecurityGroup:InstanceSecurityGroup":
		r = &InstanceSecurityGroup{}
	case "scaleway:index/instanceSecurityGroupRules:InstanceSecurityGroupRules":
		r = &InstanceSecurityGroupRules{}
	case "scaleway:index/instanceServer:InstanceServer":
		r = &InstanceServer{}
	case "scaleway:index/instanceSnapshot:InstanceSnapshot":
		r = &InstanceSnapshot{}
	case "scaleway:index/instanceVolume:InstanceVolume":
		r = &InstanceVolume{}
	case "scaleway:index/kubernetesCluster:KubernetesCluster":
		r = &KubernetesCluster{}
	case "scaleway:index/kubernetesNodePool:KubernetesNodePool":
		r = &KubernetesNodePool{}
	case "scaleway:index/loadbalancer:Loadbalancer":
		r = &Loadbalancer{}
	case "scaleway:index/loadbalancerBackend:LoadbalancerBackend":
		r = &LoadbalancerBackend{}
	case "scaleway:index/loadbalancerCertificate:LoadbalancerCertificate":
		r = &LoadbalancerCertificate{}
	case "scaleway:index/loadbalancerFrontend:LoadbalancerFrontend":
		r = &LoadbalancerFrontend{}
	case "scaleway:index/loadbalancerIP:LoadbalancerIP":
		r = &LoadbalancerIP{}
	case "scaleway:index/objectBucket:ObjectBucket":
		r = &ObjectBucket{}
	case "scaleway:index/registryNamespace:RegistryNamespace":
		r = &RegistryNamespace{}
	case "scaleway:index/route:Route":
		r = &Route{}
	case "scaleway:index/vpcGatewayNetwork:VpcGatewayNetwork":
		r = &VpcGatewayNetwork{}
	case "scaleway:index/vpcPrivateNetwork:VpcPrivateNetwork":
		r = &VpcPrivateNetwork{}
	case "scaleway:index/vpcPublicGateway:VpcPublicGateway":
		r = &VpcPublicGateway{}
	case "scaleway:index/vpcPublicGatewayDHCP:VpcPublicGatewayDHCP":
		r = &VpcPublicGatewayDHCP{}
	case "scaleway:index/vpcPublicGatewayIP:VpcPublicGatewayIP":
		r = &VpcPublicGatewayIP{}
	case "scaleway:index/vpcPublicGatewayPATRule:VpcPublicGatewayPATRule":
		r = &VpcPublicGatewayPATRule{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:scaleway" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Printf("failed to determine package version. defaulting to v1: %v\n", err)
	}
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/accountSshKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/appleSliconValleyServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/baremetalServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/database",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/databaseACL",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/databaseInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/databasePrivilege",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/databaseUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/domainRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/iOTDevice",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/iOTHub",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/iOTNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/iOTRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/instanceIP",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/instanceIPReverseDNS",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/instancePlacementGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/instancePrivateNIC",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/instanceSecurityGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/instanceSecurityGroupRules",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/instanceServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/instanceSnapshot",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/instanceVolume",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/kubernetesCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/kubernetesNodePool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/loadbalancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/loadbalancerBackend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/loadbalancerCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/loadbalancerFrontend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/loadbalancerIP",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/objectBucket",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/registryNamespace",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/route",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/vpcGatewayNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/vpcPrivateNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/vpcPublicGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/vpcPublicGatewayDHCP",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/vpcPublicGatewayIP",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"index/vpcPublicGatewayPATRule",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"scaleway",
		&pkg{version},
	)
}

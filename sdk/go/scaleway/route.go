// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Route struct {
	pulumi.CustomResourceState

	// The backend ID destination of redirection
	BackendId pulumi.StringOutput `pulumi:"backendId"`
	// The frontend ID origin of redirection
	FrontendId pulumi.StringOutput `pulumi:"frontendId"`
	// The domain to match against
	MatchSni pulumi.StringPtrOutput `pulumi:"matchSni"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackendId == nil {
		return nil, errors.New("invalid value for required argument 'BackendId'")
	}
	if args.FrontendId == nil {
		return nil, errors.New("invalid value for required argument 'FrontendId'")
	}
	var resource Route
	err := ctx.RegisterResource("scaleway:index/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("scaleway:index/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	// The backend ID destination of redirection
	BackendId *string `pulumi:"backendId"`
	// The frontend ID origin of redirection
	FrontendId *string `pulumi:"frontendId"`
	// The domain to match against
	MatchSni *string `pulumi:"matchSni"`
}

type RouteState struct {
	// The backend ID destination of redirection
	BackendId pulumi.StringPtrInput
	// The frontend ID origin of redirection
	FrontendId pulumi.StringPtrInput
	// The domain to match against
	MatchSni pulumi.StringPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	// The backend ID destination of redirection
	BackendId string `pulumi:"backendId"`
	// The frontend ID origin of redirection
	FrontendId string `pulumi:"frontendId"`
	// The domain to match against
	MatchSni *string `pulumi:"matchSni"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// The backend ID destination of redirection
	BackendId pulumi.StringInput
	// The frontend ID origin of redirection
	FrontendId pulumi.StringInput
	// The domain to match against
	MatchSni pulumi.StringPtrInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(ctx context.Context) RouteOutput
}

func (*Route) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *Route) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i *Route) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteInput)(nil)).Elem(), &Route{})
	pulumi.RegisterOutputType(RouteOutput{})
}

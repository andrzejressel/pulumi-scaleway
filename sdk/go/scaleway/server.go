// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// **DEPRECATED**: This resource is deprecated and will be removed in `v2.0+`.
// Please use `InstanceServer` instead.
//
// Provides servers. This allows servers to be created, updated and deleted.
// For additional details please refer to [API documentation](https://developer.scaleway.com/#servers).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := scaleway.NewServer(ctx, "test", &scaleway.ServerArgs{
// 			Image: pulumi.String("5faef9cd-ea9b-4a63-9171-9e26bec03dbc"),
// 			Type:  pulumi.String("VC1M"),
// 			Volumes: scaleway.ServerVolumeArray{
// 				&scaleway.ServerVolumeArgs{
// 					SizeInGb: pulumi.Int(20),
// 					Type:     pulumi.String("l_ssd"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Volume
//
// You can attach additional volumes to your instance, which will share the lifetime
// of your `Server` resource.
//
// > **Warning:** Using the `volume` attribute does not modify the System Volume provided default with every `Server` instance. Instead it adds additional volumes to the server instance.
//
// > **Warning:** Some instance types require an additional volume to work. This includes for example *START-1M* and *VC1M*. If you run into this issue add an additional volume of the specified size.
//
// The `volume` mapping supports the following:
//
// * `type` - (Required) The type of volume. Can be `"lSsd"`
// * `sizeInGb` - (Required) The size of the volume in gigabytes.
type Server struct {
	pulumi.CustomResourceState

	// the boot mechanism for this server. Possible values include `local` and `bootscript`
	BootType pulumi.StringOutput `pulumi:"bootType"`
	// server bootscript
	Bootscript pulumi.StringPtrOutput `pulumi:"bootscript"`
	// allows you to define cloudinit script for this server
	Cloudinit pulumi.StringOutput `pulumi:"cloudinit"`
	// make server publicly available
	DynamicIpRequired pulumi.BoolPtrOutput `pulumi:"dynamicIpRequired"`
	// enable ipv6
	EnableIpv6 pulumi.BoolPtrOutput `pulumi:"enableIpv6"`
	// base image of server
	Image pulumi.StringOutput `pulumi:"image"`
	// name of server
	Name pulumi.StringOutput `pulumi:"name"`
	// private ip of the new resource
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// set a public ip previously created (a real ip is expected here, not its resource id)
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// if `enableIpv6` is set this contains the ipv6 address of your instance
	PublicIpv6 pulumi.StringOutput `pulumi:"publicIpv6"`
	// assign security group to server
	SecurityGroup pulumi.StringPtrOutput `pulumi:"securityGroup"`
	// allows you to define the desired state of your server. Valid values include (`stopped`, `running`)
	State pulumi.StringOutput `pulumi:"state"`
	// contains details from the scaleway API the state of your instance
	StateDetail pulumi.StringOutput `pulumi:"stateDetail"`
	// list of tags for server
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// type of server
	Type pulumi.StringOutput `pulumi:"type"`
	// attach additional volumes to your instance (see below)
	Volumes ServerVolumeArrayOutput `pulumi:"volumes"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil || args.Image == nil {
		return nil, errors.New("missing required argument 'Image'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &ServerArgs{}
	}
	var resource Server
	err := ctx.RegisterResource("scaleway:index/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("scaleway:index/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// the boot mechanism for this server. Possible values include `local` and `bootscript`
	BootType *string `pulumi:"bootType"`
	// server bootscript
	Bootscript *string `pulumi:"bootscript"`
	// allows you to define cloudinit script for this server
	Cloudinit *string `pulumi:"cloudinit"`
	// make server publicly available
	DynamicIpRequired *bool `pulumi:"dynamicIpRequired"`
	// enable ipv6
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// base image of server
	Image *string `pulumi:"image"`
	// name of server
	Name *string `pulumi:"name"`
	// private ip of the new resource
	PrivateIp *string `pulumi:"privateIp"`
	// set a public ip previously created (a real ip is expected here, not its resource id)
	PublicIp *string `pulumi:"publicIp"`
	// if `enableIpv6` is set this contains the ipv6 address of your instance
	PublicIpv6 *string `pulumi:"publicIpv6"`
	// assign security group to server
	SecurityGroup *string `pulumi:"securityGroup"`
	// allows you to define the desired state of your server. Valid values include (`stopped`, `running`)
	State *string `pulumi:"state"`
	// contains details from the scaleway API the state of your instance
	StateDetail *string `pulumi:"stateDetail"`
	// list of tags for server
	Tags []string `pulumi:"tags"`
	// type of server
	Type *string `pulumi:"type"`
	// attach additional volumes to your instance (see below)
	Volumes []ServerVolume `pulumi:"volumes"`
}

type ServerState struct {
	// the boot mechanism for this server. Possible values include `local` and `bootscript`
	BootType pulumi.StringPtrInput
	// server bootscript
	Bootscript pulumi.StringPtrInput
	// allows you to define cloudinit script for this server
	Cloudinit pulumi.StringPtrInput
	// make server publicly available
	DynamicIpRequired pulumi.BoolPtrInput
	// enable ipv6
	EnableIpv6 pulumi.BoolPtrInput
	// base image of server
	Image pulumi.StringPtrInput
	// name of server
	Name pulumi.StringPtrInput
	// private ip of the new resource
	PrivateIp pulumi.StringPtrInput
	// set a public ip previously created (a real ip is expected here, not its resource id)
	PublicIp pulumi.StringPtrInput
	// if `enableIpv6` is set this contains the ipv6 address of your instance
	PublicIpv6 pulumi.StringPtrInput
	// assign security group to server
	SecurityGroup pulumi.StringPtrInput
	// allows you to define the desired state of your server. Valid values include (`stopped`, `running`)
	State pulumi.StringPtrInput
	// contains details from the scaleway API the state of your instance
	StateDetail pulumi.StringPtrInput
	// list of tags for server
	Tags pulumi.StringArrayInput
	// type of server
	Type pulumi.StringPtrInput
	// attach additional volumes to your instance (see below)
	Volumes ServerVolumeArrayInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// the boot mechanism for this server. Possible values include `local` and `bootscript`
	BootType *string `pulumi:"bootType"`
	// server bootscript
	Bootscript *string `pulumi:"bootscript"`
	// allows you to define cloudinit script for this server
	Cloudinit *string `pulumi:"cloudinit"`
	// make server publicly available
	DynamicIpRequired *bool `pulumi:"dynamicIpRequired"`
	// enable ipv6
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// base image of server
	Image string `pulumi:"image"`
	// name of server
	Name *string `pulumi:"name"`
	// set a public ip previously created (a real ip is expected here, not its resource id)
	PublicIp *string `pulumi:"publicIp"`
	// assign security group to server
	SecurityGroup *string `pulumi:"securityGroup"`
	// allows you to define the desired state of your server. Valid values include (`stopped`, `running`)
	State *string `pulumi:"state"`
	// list of tags for server
	Tags []string `pulumi:"tags"`
	// type of server
	Type string `pulumi:"type"`
	// attach additional volumes to your instance (see below)
	Volumes []ServerVolume `pulumi:"volumes"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// the boot mechanism for this server. Possible values include `local` and `bootscript`
	BootType pulumi.StringPtrInput
	// server bootscript
	Bootscript pulumi.StringPtrInput
	// allows you to define cloudinit script for this server
	Cloudinit pulumi.StringPtrInput
	// make server publicly available
	DynamicIpRequired pulumi.BoolPtrInput
	// enable ipv6
	EnableIpv6 pulumi.BoolPtrInput
	// base image of server
	Image pulumi.StringInput
	// name of server
	Name pulumi.StringPtrInput
	// set a public ip previously created (a real ip is expected here, not its resource id)
	PublicIp pulumi.StringPtrInput
	// assign security group to server
	SecurityGroup pulumi.StringPtrInput
	// allows you to define the desired state of your server. Valid values include (`stopped`, `running`)
	State pulumi.StringPtrInput
	// list of tags for server
	Tags pulumi.StringArrayInput
	// type of server
	Type pulumi.StringInput
	// attach additional volumes to your instance (see below)
	Volumes ServerVolumeArrayInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

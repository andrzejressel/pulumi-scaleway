// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// **DEPRECATED**: This resource is deprecated and will be removed in `v2.0+`.
// Please use `InstanceVolume` instead.
//
// Provides volumes. This allows volumes to be created, updated and deleted.
// For additional details please refer to [API documentation](https://developer.scaleway.com/#volumes).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-scaleway/sdk/go/scaleway"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testVolume, err := scaleway.NewVolume(ctx, "testVolume", &scaleway.VolumeArgs{
// 			SizeInGb: pulumi.Int(20),
// 			Type:     pulumi.String("l_ssd"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = scaleway.NewServer(ctx, "testServer", &scaleway.ServerArgs{
// 			Image: pulumi.String("aecaed73-51a5-4439-a127-6d8229847145"),
// 			Type:  pulumi.String("C2S"),
// 			Volumes: scaleway.ServerVolumeArray{
// 				testVolume.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Volume struct {
	pulumi.CustomResourceState

	// name of volume
	Name pulumi.StringOutput `pulumi:"name"`
	// (Read Only) the `Server` instance which has this volume mounted right now
	Server pulumi.StringOutput `pulumi:"server"`
	// size of the volume in GB
	SizeInGb pulumi.IntOutput `pulumi:"sizeInGb"`
	// type of volume
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil || args.SizeInGb == nil {
		return nil, errors.New("missing required argument 'SizeInGb'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &VolumeArgs{}
	}
	var resource Volume
	err := ctx.RegisterResource("scaleway:index/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("scaleway:index/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	// name of volume
	Name *string `pulumi:"name"`
	// (Read Only) the `Server` instance which has this volume mounted right now
	Server *string `pulumi:"server"`
	// size of the volume in GB
	SizeInGb *int `pulumi:"sizeInGb"`
	// type of volume
	Type *string `pulumi:"type"`
}

type VolumeState struct {
	// name of volume
	Name pulumi.StringPtrInput
	// (Read Only) the `Server` instance which has this volume mounted right now
	Server pulumi.StringPtrInput
	// size of the volume in GB
	SizeInGb pulumi.IntPtrInput
	// type of volume
	Type pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// name of volume
	Name *string `pulumi:"name"`
	// size of the volume in GB
	SizeInGb int `pulumi:"sizeInGb"`
	// type of volume
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// name of volume
	Name pulumi.StringPtrInput
	// size of the volume in GB
	SizeInGb pulumi.IntInput
	// type of volume
	Type pulumi.StringInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}
